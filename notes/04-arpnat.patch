<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<title>Gargoyle - /patches-generic/04-arpnat.patch - Redmine</title>
<meta name="description" content="Redmine" />
<meta name="keywords" content="issue,bug,tracker" />
<link href="/gargoyle/themes/gargoyle/stylesheets/application.css?1274380407" media="all" rel="stylesheet" type="text/css" />
<script src="/gargoyle/javascripts/prototype.js?1274380407" type="text/javascript"></script>
<script src="/gargoyle/javascripts/effects.js?1274380407" type="text/javascript"></script>
<script src="/gargoyle/javascripts/dragdrop.js?1274380407" type="text/javascript"></script>
<script src="/gargoyle/javascripts/controls.js?1274380407" type="text/javascript"></script>
<script src="/gargoyle/javascripts/application.js?1274380407" type="text/javascript"></script>
<link href="/gargoyle/stylesheets/jstoolbar.css?1274380407" media="screen" rel="stylesheet" type="text/css" />
<!--[if IE]>
    <style type="text/css">
      * html body{ width: expression( document.documentElement.clientWidth < 900 ? '900px' : '100%' ); }
      body {behavior: url(/gargoyle/stylesheets/csshover.htc?1274380407);}
    </style>
<![endif]-->

<!-- page specific tags -->

  <script src="/gargoyle/javascripts/repository_navigation.js?1274380407" type="text/javascript"></script>

<link href="/gargoyle/stylesheets/scm.css?1274380407" media="screen" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="wrapper">
<div id="top-menu">
    <div id="account">
        <ul><li><a href="/gargoyle/login" class="login">Sign in</a></li>
<li><a href="/gargoyle/account/register" class="register">Register</a></li></ul>    </div>
    
    <ul><li><a href="/gargoyle/" class="home">Home</a></li>
<li><a href="http://www.redmine.org/guide" class="help">Help</a></li></ul></div>
      
<div id="header">
    <div id="quick-search">
        <form action="/gargoyle/search/index/gargoyle" method="get">
        <input name="changesets" type="hidden" value="1" />
        <a href="/gargoyle/search/index/gargoyle" accesskey="4">Search</a>:
        <input accesskey="f" class="small" id="q" name="q" size="20" type="text" />
        </form>
        
    </div>
    
    <h1>Gargoyle</h1>
    
    
    <div id="main-menu">
        <ul><li><a href="/gargoyle/projects/gargoyle" class="overview">Overview</a></li>
<li><a href="/gargoyle/projects/gargoyle/activity" class="activity">Activity</a></li>
<li><a href="/gargoyle/projects/gargoyle/issues" class="issues">Issues</a></li>
<li><a href="/gargoyle/projects/gargoyle/issues/new" accesskey="7" class="new-issue">New issue</a></li>
<li><a href="/gargoyle/projects/gargoyle/repository" class="repository selected">Repository</a></li></ul>
    </div>
    
</div>

<div class="nosidebar" id="main">
    <div id="sidebar">        
        
        
    </div>
    
    <div id="content">
				
        

<div class="contextual">
  

<a href="/gargoyle/projects/gargoyle/repository/statistics" class="icon icon-stats">Statistics</a>

<form action="/gargoyle/projects/gargoyle/repository/entry/patches-generic/04-arpnat.patch?rev=" id="revision_selector" method="get">  <!-- Branches Dropdown -->
      | Branch: 
    <select id="branch" name="branch"><option value=""></option>
<option value="1.0">1.0</option>
<option value="1.2">1.2</option>
<option value="1.4">1.4</option>
<option value="i18n">i18n</option>
<option value="master" selected="selected">master</option>
<option value="netset">netset</option>
<option value="new_dns">new_dns</option>
<option value="openvpn">openvpn</option>
<option value="plugin">plugin</option>
<option value="sflash_26">sflash_26</option>
<option value="tor">tor</option>
<option value="tor-update">tor-update</option>
<option value="usb_printer">usb_printer</option></select>
  
      | Tag: 
    <select id="tag" name="tag"><option value=""></option>
<option value="1.0.0_beta1">1.0.0_beta1</option>
<option value="1.0.0_beta2">1.0.0_beta2</option>
<option value="1.0.0_beta3">1.0.0_beta3</option>
<option value="1.0.0_beta3a_last_709">1.0.0_beta3a_last_709</option>
<option value="1.0.0_beta4">1.0.0_beta4</option>
<option value="1.0.0_beta5">1.0.0_beta5</option>
<option value="1.0.0_final">1.0.0_final</option>
<option value="1.0.1">1.0.1</option>
<option value="1.0.10">1.0.10</option>
<option value="1.0.11">1.0.11</option>
<option value="1.0.12">1.0.12</option>
<option value="1.0.13">1.0.13</option>
<option value="1.0.14">1.0.14</option>
<option value="1.0.16">1.0.16</option>
<option value="1.0.2">1.0.2</option>
<option value="1.0.3">1.0.3</option>
<option value="1.0.4">1.0.4</option>
<option value="1.0.5">1.0.5</option>
<option value="1.0.6">1.0.6</option>
<option value="1.0.7">1.0.7</option>
<option value="1.0.8">1.0.8</option>
<option value="1.0.9">1.0.9</option>
<option value="1.1.0">1.1.0</option>
<option value="1.1.1">1.1.1</option>
<option value="1.1.2">1.1.2</option>
<option value="1.1.3">1.1.3</option>
<option value="1.1.4">1.1.4</option>
<option value="1.1.5">1.1.5</option>
<option value="1.1.6">1.1.6</option>
<option value="1.1.7">1.1.7</option>
<option value="1.1.8">1.1.8</option>
<option value="1.2.0">1.2.0</option>
<option value="1.2.1">1.2.1</option>
<option value="1.2.2">1.2.2</option>
<option value="1.2.3">1.2.3</option>
<option value="1.2.4">1.2.4</option>
<option value="1.2.5">1.2.5</option>
<option value="1.3.0">1.3.0</option>
<option value="1.3.1">1.3.1</option>
<option value="1.3.10">1.3.10</option>
<option value="1.3.11">1.3.11</option>
<option value="1.3.12">1.3.12</option>
<option value="1.3.13">1.3.13</option>
<option value="1.3.14">1.3.14</option>
<option value="1.3.15">1.3.15</option>
<option value="1.3.16">1.3.16</option>
<option value="1.3.2">1.3.2</option>
<option value="1.3.3">1.3.3</option>
<option value="1.3.4">1.3.4</option>
<option value="1.3.5">1.3.5</option>
<option value="1.3.6">1.3.6</option>
<option value="1.3.7">1.3.7</option>
<option value="1.3.8">1.3.8</option>
<option value="1.3.9">1.3.9</option>
<option value="1.4.0">1.4.0</option>
<option value="1.4.1">1.4.1</option>
<option value="1.4.2">1.4.2</option>
<option value="1.4.3">1.4.3</option>
<option value="1.4.4">1.4.4</option>
<option value="1.4.5">1.4.5</option>
<option value="1.4.6">1.4.6</option>
<option value="1.4.7">1.4.7</option>
<option value="1.5.0">1.5.0</option>
<option value="1.5.1">1.5.1</option>
<option value="1.5.10">1.5.10</option>
<option value="1.5.11">1.5.11</option>
<option value="1.5.2">1.5.2</option>
<option value="1.5.3">1.5.3</option>
<option value="1.5.4">1.5.4</option>
<option value="1.5.5">1.5.5</option>
<option value="1.5.6">1.5.6</option>
<option value="1.5.7">1.5.7</option>
<option value="1.5.8">1.5.8</option>
<option value="1.5.9">1.5.9</option></select>
  
  | Revision: 
  <input id="rev" name="rev" size="8" type="text" value="master" />
</form>
</div>

<h2><a href="/gargoyle/projects/gargoyle/repository/revisions/master/show">root</a>

    / <a href="/gargoyle/projects/gargoyle/repository/revisions/master/show/patches-generic">patches-generic</a>


    / <a href="/gargoyle/projects/gargoyle/repository/revisions/master/changes/patches-generic/04-arpnat.patch">04-arpnat.patch</a>


@ master

</h2>

<p>

<p>
<a href="/gargoyle/projects/gargoyle/repository/revisions/master/changes/patches-generic/04-arpnat.patch">History</a> |

    View |


    <a href="/gargoyle/projects/gargoyle/repository/revisions/master/annotate/patches-generic/04-arpnat.patch">Annotate</a> |

<a href="/gargoyle/projects/gargoyle/repository/revisions/master/raw/patches-generic/04-arpnat.patch">Download</a>
(27.3 KB)
</p>


</p>

<div class="autoscroll">
<table class="filecontent CodeRay">
<tbody>


<tr><th class="line-num" id="L1"><a href="#L1">1</a></th><td class="line-code"><pre>--- a/include/netfilter.mk	2012-08-27 02:10:23.773833277 -0400
</pre></td></tr>


<tr><th class="line-num" id="L2"><a href="#L2">2</a></th><td class="line-code"><pre>+++ b/include/netfilter.mk	2012-08-30 05:17:04.583372998 -0400
</pre></td></tr>


<tr><th class="line-num" id="L3"><a href="#L3">3</a></th><td class="line-code"><pre>@@ -262,6 +270,10 @@
</pre></td></tr>


<tr><th class="line-num" id="L4"><a href="#L4">4</a></th><td class="line-code"><pre> $(eval $(call nf_add,EBTABLES,CONFIG_BRIDGE_EBT_REDIRECT, $(P_EBT)ebt_redirect))
</pre></td></tr>


<tr><th class="line-num" id="L5"><a href="#L5">5</a></th><td class="line-code"><pre> $(eval $(call nf_add,EBTABLES_IP4,CONFIG_BRIDGE_EBT_SNAT, $(P_EBT)ebt_snat))
</pre></td></tr>


<tr><th class="line-num" id="L6"><a href="#L6">6</a></th><td class="line-code"><pre> 
</pre></td></tr>


<tr><th class="line-num" id="L7"><a href="#L7">7</a></th><td class="line-code"><pre>+# arpnat
</pre></td></tr>


<tr><th class="line-num" id="L8"><a href="#L8">8</a></th><td class="line-code"><pre>+$(eval $(call nf_add,EBTABLES,CONFIG_BRIDGE_EBT_ARPNAT, $(P_EBT)ebt_arpnat))
</pre></td></tr>


<tr><th class="line-num" id="L9"><a href="#L9">9</a></th><td class="line-code"><pre>+
</pre></td></tr>


<tr><th class="line-num" id="L10"><a href="#L10">10</a></th><td class="line-code"><pre>+
</pre></td></tr>


<tr><th class="line-num" id="L11"><a href="#L11">11</a></th><td class="line-code"><pre> # watchers
</pre></td></tr>


<tr><th class="line-num" id="L12"><a href="#L12">12</a></th><td class="line-code"><pre> $(eval $(call nf_add,EBTABLES_WATCHERS,CONFIG_BRIDGE_EBT_LOG, $(P_EBT)ebt_log))
</pre></td></tr>


<tr><th class="line-num" id="L13"><a href="#L13">13</a></th><td class="line-code"><pre> $(eval $(call nf_add,EBTABLES_WATCHERS,CONFIG_BRIDGE_EBT_ULOG, $(P_EBT)ebt_ulog))
</pre></td></tr>


<tr><th class="line-num" id="L14"><a href="#L14">14</a></th><td class="line-code"><pre>--- a/target/linux/generic/config-3.3	2012-08-27 02:10:23.477828683 -0400
</pre></td></tr>


<tr><th class="line-num" id="L15"><a href="#L15">15</a></th><td class="line-code"><pre>+++ b/target/linux/generic/config-3.3	2012-08-30 05:21:20.503403288 -0400
</pre></td></tr>


<tr><th class="line-num" id="L16"><a href="#L16">16</a></th><td class="line-code"><pre>@@ -295,30 +295,31 @@
</pre></td></tr>


<tr><th class="line-num" id="L17"><a href="#L17">17</a></th><td class="line-code"><pre> CONFIG_BRANCH_PROFILE_NONE=y
</pre></td></tr>


<tr><th class="line-num" id="L18"><a href="#L18">18</a></th><td class="line-code"><pre> # CONFIG_BRCMFMAC is not set
</pre></td></tr>


<tr><th class="line-num" id="L19"><a href="#L19">19</a></th><td class="line-code"><pre> CONFIG_BRIDGE=y
</pre></td></tr>


<tr><th class="line-num" id="L20"><a href="#L20">20</a></th><td class="line-code"><pre>-# CONFIG_BRIDGE_EBT_802_3 is not set
</pre></td></tr>


<tr><th class="line-num" id="L21"><a href="#L21">21</a></th><td class="line-code"><pre>-# CONFIG_BRIDGE_EBT_AMONG is not set
</pre></td></tr>


<tr><th class="line-num" id="L22"><a href="#L22">22</a></th><td class="line-code"><pre>-# CONFIG_BRIDGE_EBT_ARP is not set
</pre></td></tr>


<tr><th class="line-num" id="L23"><a href="#L23">23</a></th><td class="line-code"><pre>-# CONFIG_BRIDGE_EBT_ARPREPLY is not set
</pre></td></tr>


<tr><th class="line-num" id="L24"><a href="#L24">24</a></th><td class="line-code"><pre>-# CONFIG_BRIDGE_EBT_BROUTE is not set
</pre></td></tr>


<tr><th class="line-num" id="L25"><a href="#L25">25</a></th><td class="line-code"><pre>-# CONFIG_BRIDGE_EBT_DNAT is not set
</pre></td></tr>


<tr><th class="line-num" id="L26"><a href="#L26">26</a></th><td class="line-code"><pre>-# CONFIG_BRIDGE_EBT_IP is not set
</pre></td></tr>


<tr><th class="line-num" id="L27"><a href="#L27">27</a></th><td class="line-code"><pre>-# CONFIG_BRIDGE_EBT_IP6 is not set
</pre></td></tr>


<tr><th class="line-num" id="L28"><a href="#L28">28</a></th><td class="line-code"><pre>-# CONFIG_BRIDGE_EBT_LIMIT is not set
</pre></td></tr>


<tr><th class="line-num" id="L29"><a href="#L29">29</a></th><td class="line-code"><pre>-# CONFIG_BRIDGE_EBT_LOG is not set
</pre></td></tr>


<tr><th class="line-num" id="L30"><a href="#L30">30</a></th><td class="line-code"><pre>-# CONFIG_BRIDGE_EBT_MARK is not set
</pre></td></tr>


<tr><th class="line-num" id="L31"><a href="#L31">31</a></th><td class="line-code"><pre>-# CONFIG_BRIDGE_EBT_MARK_T is not set
</pre></td></tr>


<tr><th class="line-num" id="L32"><a href="#L32">32</a></th><td class="line-code"><pre>-# CONFIG_BRIDGE_EBT_NFLOG is not set
</pre></td></tr>


<tr><th class="line-num" id="L33"><a href="#L33">33</a></th><td class="line-code"><pre>-# CONFIG_BRIDGE_EBT_PKTTYPE is not set
</pre></td></tr>


<tr><th class="line-num" id="L34"><a href="#L34">34</a></th><td class="line-code"><pre>-# CONFIG_BRIDGE_EBT_REDIRECT is not set
</pre></td></tr>


<tr><th class="line-num" id="L35"><a href="#L35">35</a></th><td class="line-code"><pre>-# CONFIG_BRIDGE_EBT_SNAT is not set
</pre></td></tr>


<tr><th class="line-num" id="L36"><a href="#L36">36</a></th><td class="line-code"><pre>-# CONFIG_BRIDGE_EBT_STP is not set
</pre></td></tr>


<tr><th class="line-num" id="L37"><a href="#L37">37</a></th><td class="line-code"><pre>-# CONFIG_BRIDGE_EBT_T_FILTER is not set
</pre></td></tr>


<tr><th class="line-num" id="L38"><a href="#L38">38</a></th><td class="line-code"><pre>-# CONFIG_BRIDGE_EBT_T_NAT is not set
</pre></td></tr>


<tr><th class="line-num" id="L39"><a href="#L39">39</a></th><td class="line-code"><pre>-# CONFIG_BRIDGE_EBT_ULOG is not set
</pre></td></tr>


<tr><th class="line-num" id="L40"><a href="#L40">40</a></th><td class="line-code"><pre>-# CONFIG_BRIDGE_EBT_VLAN is not set
</pre></td></tr>


<tr><th class="line-num" id="L41"><a href="#L41">41</a></th><td class="line-code"><pre>+#CONFIG_BRIDGE_EBT_802_3 is not set
</pre></td></tr>


<tr><th class="line-num" id="L42"><a href="#L42">42</a></th><td class="line-code"><pre>+#CONFIG_BRIDGE_EBT_AMONG is not set
</pre></td></tr>


<tr><th class="line-num" id="L43"><a href="#L43">43</a></th><td class="line-code"><pre>+CONFIG_BRIDGE_EBT_ARP=y
</pre></td></tr>


<tr><th class="line-num" id="L44"><a href="#L44">44</a></th><td class="line-code"><pre>+CONFIG_BRIDGE_EBT_ARPREPLY=y
</pre></td></tr>


<tr><th class="line-num" id="L45"><a href="#L45">45</a></th><td class="line-code"><pre>+CONFIG_BRIDGE_EBT_BROUTE=y
</pre></td></tr>


<tr><th class="line-num" id="L46"><a href="#L46">46</a></th><td class="line-code"><pre>+CONFIG_BRIDGE_EBT_DNAT=y
</pre></td></tr>


<tr><th class="line-num" id="L47"><a href="#L47">47</a></th><td class="line-code"><pre>+CONFIG_BRIDGE_EBT_IP=y
</pre></td></tr>


<tr><th class="line-num" id="L48"><a href="#L48">48</a></th><td class="line-code"><pre>+CONFIG_BRIDGE_EBT_IP6=y
</pre></td></tr>


<tr><th class="line-num" id="L49"><a href="#L49">49</a></th><td class="line-code"><pre>+CONFIG_BRIDGE_EBT_LIMIT=y
</pre></td></tr>


<tr><th class="line-num" id="L50"><a href="#L50">50</a></th><td class="line-code"><pre>+CONFIG_BRIDGE_EBT_LOG=y
</pre></td></tr>


<tr><th class="line-num" id="L51"><a href="#L51">51</a></th><td class="line-code"><pre>+CONFIG_BRIDGE_EBT_MARK=y
</pre></td></tr>


<tr><th class="line-num" id="L52"><a href="#L52">52</a></th><td class="line-code"><pre>+CONFIG_BRIDGE_EBT_MARK_T=y
</pre></td></tr>


<tr><th class="line-num" id="L53"><a href="#L53">53</a></th><td class="line-code"><pre>+CONFIG_BRIDGE_EBT_NFLOG=y
</pre></td></tr>


<tr><th class="line-num" id="L54"><a href="#L54">54</a></th><td class="line-code"><pre>+CONFIG_BRIDGE_EBT_PKTTYPE=y
</pre></td></tr>


<tr><th class="line-num" id="L55"><a href="#L55">55</a></th><td class="line-code"><pre>+CONFIG_BRIDGE_EBT_REDIRECT=y
</pre></td></tr>


<tr><th class="line-num" id="L56"><a href="#L56">56</a></th><td class="line-code"><pre>+CONFIG_BRIDGE_EBT_SNAT=y
</pre></td></tr>


<tr><th class="line-num" id="L57"><a href="#L57">57</a></th><td class="line-code"><pre>+CONFIG_BRIDGE_EBT_ARPNAT=y
</pre></td></tr>


<tr><th class="line-num" id="L58"><a href="#L58">58</a></th><td class="line-code"><pre>+CONFIG_BRIDGE_EBT_STP=y
</pre></td></tr>


<tr><th class="line-num" id="L59"><a href="#L59">59</a></th><td class="line-code"><pre>+CONFIG_BRIDGE_EBT_T_FILTER=y
</pre></td></tr>


<tr><th class="line-num" id="L60"><a href="#L60">60</a></th><td class="line-code"><pre>+CONFIG_BRIDGE_EBT_T_NAT=y
</pre></td></tr>


<tr><th class="line-num" id="L61"><a href="#L61">61</a></th><td class="line-code"><pre>+CONFIG_BRIDGE_EBT_ULOG=y
</pre></td></tr>


<tr><th class="line-num" id="L62"><a href="#L62">62</a></th><td class="line-code"><pre>+CONFIG_BRIDGE_EBT_VLAN=y
</pre></td></tr>


<tr><th class="line-num" id="L63"><a href="#L63">63</a></th><td class="line-code"><pre> # CONFIG_BRIDGE_IGMP_SNOOPING is not set
</pre></td></tr>


<tr><th class="line-num" id="L64"><a href="#L64">64</a></th><td class="line-code"><pre>-# CONFIG_BRIDGE_NETFILTER is not set
</pre></td></tr>


<tr><th class="line-num" id="L65"><a href="#L65">65</a></th><td class="line-code"><pre>-# CONFIG_BRIDGE_NF_EBTABLES is not set
</pre></td></tr>


<tr><th class="line-num" id="L66"><a href="#L66">66</a></th><td class="line-code"><pre>+CONFIG_BRIDGE_NETFILTER=y
</pre></td></tr>


<tr><th class="line-num" id="L67"><a href="#L67">67</a></th><td class="line-code"><pre>+CONFIG_BRIDGE_NF_EBTABLES=y
</pre></td></tr>


<tr><th class="line-num" id="L68"><a href="#L68">68</a></th><td class="line-code"><pre> # CONFIG_BROADCOM_PHY is not set
</pre></td></tr>


<tr><th class="line-num" id="L69"><a href="#L69">69</a></th><td class="line-code"><pre> CONFIG_BROKEN_ON_SMP=y
</pre></td></tr>


<tr><th class="line-num" id="L70"><a href="#L70">70</a></th><td class="line-code"><pre> # CONFIG_BSD_DISKLABEL is not set
</pre></td></tr>


<tr><th class="line-num" id="L71"><a href="#L71">71</a></th><td class="line-code"><pre>--- a/package/ebtables/Makefile	2012-08-27 02:10:27.461890518 -0400
</pre></td></tr>


<tr><th class="line-num" id="L72"><a href="#L72">72</a></th><td class="line-code"><pre>+++ b/package/ebtables/Makefile	2012-08-30 05:23:23.673341400 -0400
</pre></td></tr>


<tr><th class="line-num" id="L73"><a href="#L73">73</a></th><td class="line-code"><pre>@@ -59,6 +59,8 @@
</pre></td></tr>


<tr><th class="line-num" id="L74"><a href="#L74">74</a></th><td class="line-code"><pre> 	$(INSTALL_BIN) $(PKG_BUILD_DIR)/extensions/*.so $(1)/usr/lib/ebtables/
</pre></td></tr>


<tr><th class="line-num" id="L75"><a href="#L75">75</a></th><td class="line-code"><pre> 	$(INSTALL_DIR) $(1)/usr/sbin
</pre></td></tr>


<tr><th class="line-num" id="L76"><a href="#L76">76</a></th><td class="line-code"><pre> 	$(INSTALL_BIN) $(PKG_BUILD_DIR)/ebtables $(1)/usr/sbin/
</pre></td></tr>


<tr><th class="line-num" id="L77"><a href="#L77">77</a></th><td class="line-code"><pre>+	$(INSTALL_DIR) $(1)/etc/hotplug.d/net/
</pre></td></tr>


<tr><th class="line-num" id="L78"><a href="#L78">78</a></th><td class="line-code"><pre>+	$(INSTALL_BIN) ./files/20-client_bridge $(1)/etc/hotplug.d/net/20-client_bridge
</pre></td></tr>


<tr><th class="line-num" id="L79"><a href="#L79">79</a></th><td class="line-code"><pre> endef
</pre></td></tr>


<tr><th class="line-num" id="L80"><a href="#L80">80</a></th><td class="line-code"><pre> 
</pre></td></tr>


<tr><th class="line-num" id="L81"><a href="#L81">81</a></th><td class="line-code"><pre> define Package/ebtables-utils/install
</pre></td></tr>


<tr><th class="line-num" id="L82"><a href="#L82">82</a></th><td class="line-code"><pre>--- /dev/null	2012-08-18 22:23:01.258815424 -0400
</pre></td></tr>


<tr><th class="line-num" id="L83"><a href="#L83">83</a></th><td class="line-code"><pre>+++ b/package/ebtables/files/20-client_bridge	2012-08-30 05:24:21.450250186 -0400
</pre></td></tr>


<tr><th class="line-num" id="L84"><a href="#L84">84</a></th><td class="line-code"><pre>@@ -0,0 +1,45 @@
</pre></td></tr>


<tr><th class="line-num" id="L85"><a href="#L85">85</a></th><td class="line-code"><pre>+######################################################################
</pre></td></tr>


<tr><th class="line-num" id="L86"><a href="#L86">86</a></th><td class="line-code"><pre>+# Client bridge hotplug script (/etc/hotplug.d/net/20-client_bridge)
</pre></td></tr>


<tr><th class="line-num" id="L87"><a href="#L87">87</a></th><td class="line-code"><pre>+# Copyright Eric Bishop, 2009 eric@gargoyle-router.com 
</pre></td></tr>


<tr><th class="line-num" id="L88"><a href="#L88">88</a></th><td class="line-code"><pre>+# Created for Gargoyle, www.gargoyle-router.com
</pre></td></tr>


<tr><th class="line-num" id="L89"><a href="#L89">89</a></th><td class="line-code"><pre>+#
</pre></td></tr>


<tr><th class="line-num" id="L90"><a href="#L90">90</a></th><td class="line-code"><pre>+#This is free software licensed under the terms of the GNU GPL v2.0
</pre></td></tr>


<tr><th class="line-num" id="L91"><a href="#L91">91</a></th><td class="line-code"><pre>+# 
</pre></td></tr>


<tr><th class="line-num" id="L92"><a href="#L92">92</a></th><td class="line-code"><pre>+# You must have the arpnat ebtables module for this to work
</pre></td></tr>


<tr><th class="line-num" id="L93"><a href="#L93">93</a></th><td class="line-code"><pre>+######################################################################
</pre></td></tr>


<tr><th class="line-num" id="L94"><a href="#L94">94</a></th><td class="line-code"><pre>+is_wifi_if=$(echo $INTERFACE | grep -e ath -e wlan)
</pre></td></tr>


<tr><th class="line-num" id="L95"><a href="#L95">95</a></th><td class="line-code"><pre>+if [ -n &quot;$is_wifi_if&quot; ] ; then
</pre></td></tr>


<tr><th class="line-num" id="L96"><a href="#L96">96</a></th><td class="line-code"><pre>+	if [ &quot;$ACTION&quot; = &quot;add&quot; -o &quot;$ACTION&quot; = &quot;register&quot; ] ; then
</pre></td></tr>


<tr><th class="line-num" id="L97"><a href="#L97">97</a></th><td class="line-code"><pre>+		sleep 2
</pre></td></tr>


<tr><th class="line-num" id="L98"><a href="#L98">98</a></th><td class="line-code"><pre>+		managed=$(iwconfig $INTERFACE 2&gt;/dev/null | grep &quot;Mode:Managed&quot;)
</pre></td></tr>


<tr><th class="line-num" id="L99"><a href="#L99">99</a></th><td class="line-code"><pre>+		if [ -n &quot;$managed&quot; ] ; then
</pre></td></tr>


<tr><th class="line-num" id="L100"><a href="#L100">100</a></th><td class="line-code"><pre>+			sta_section=$(uci show wireless | grep &quot;mode=sta$&quot; | sed 's/\.mode=sta$//g' )			
</pre></td></tr>


<tr><th class="line-num" id="L101"><a href="#L101">101</a></th><td class="line-code"><pre>+			if [ -n &quot;$sta_section&quot; ] ; then
</pre></td></tr>


<tr><th class="line-num" id="L102"><a href="#L102">102</a></th><td class="line-code"><pre>+				client_bridge=$(uci get &quot;$sta_section.client_bridge&quot;)
</pre></td></tr>


<tr><th class="line-num" id="L103"><a href="#L103">103</a></th><td class="line-code"><pre>+				if [ &quot;$client_bridge&quot; = &quot;1&quot; ] ; then
</pre></td></tr>


<tr><th class="line-num" id="L104"><a href="#L104">104</a></th><td class="line-code"><pre>+					
</pre></td></tr>


<tr><th class="line-num" id="L105"><a href="#L105">105</a></th><td class="line-code"><pre>+					if_mac=$(ifconfig &quot;$INTERFACE&quot; | grep HWaddr | awk ' { print $5 } ' )	
</pre></td></tr>


<tr><th class="line-num" id="L106"><a href="#L106">106</a></th><td class="line-code"><pre>+					ifconfig br-lan hw ether $if_mac
</pre></td></tr>


<tr><th class="line-num" id="L107"><a href="#L107">107</a></th><td class="line-code"><pre>+					
</pre></td></tr>


<tr><th class="line-num" id="L108"><a href="#L108">108</a></th><td class="line-code"><pre>+					ebtables -t nat -F PREROUTING
</pre></td></tr>


<tr><th class="line-num" id="L109"><a href="#L109">109</a></th><td class="line-code"><pre>+					ebtables -t nat -F POSTROUTING
</pre></td></tr>


<tr><th class="line-num" id="L110"><a href="#L110">110</a></th><td class="line-code"><pre>+					ebtables -t broute -F BROUTING
</pre></td></tr>


<tr><th class="line-num" id="L111"><a href="#L111">111</a></th><td class="line-code"><pre>+				
</pre></td></tr>


<tr><th class="line-num" id="L112"><a href="#L112">112</a></th><td class="line-code"><pre>+					ebtables -t nat -A PREROUTING  --in-interface  $INTERFACE -j arpnat --arpnat-target ACCEPT
</pre></td></tr>


<tr><th class="line-num" id="L113"><a href="#L113">113</a></th><td class="line-code"><pre>+					ebtables -t nat -A POSTROUTING --out-interface $INTERFACE -j arpnat --arpnat-target ACCEPT
</pre></td></tr>


<tr><th class="line-num" id="L114"><a href="#L114">114</a></th><td class="line-code"><pre>+					ebtables -t broute -A BROUTING --in-interface  $INTERFACE --protocol 0x888e -j DROP
</pre></td></tr>


<tr><th class="line-num" id="L115"><a href="#L115">115</a></th><td class="line-code"><pre>+					
</pre></td></tr>


<tr><th class="line-num" id="L116"><a href="#L116">116</a></th><td class="line-code"><pre>+					mkdir -p /tmp/client_bridge
</pre></td></tr>


<tr><th class="line-num" id="L117"><a href="#L117">117</a></th><td class="line-code"><pre>+					touch &quot;/tmp/client_bridge/$INTERFACE&quot;
</pre></td></tr>


<tr><th class="line-num" id="L118"><a href="#L118">118</a></th><td class="line-code"><pre>+				fi
</pre></td></tr>


<tr><th class="line-num" id="L119"><a href="#L119">119</a></th><td class="line-code"><pre>+			fi
</pre></td></tr>


<tr><th class="line-num" id="L120"><a href="#L120">120</a></th><td class="line-code"><pre>+		fi
</pre></td></tr>


<tr><th class="line-num" id="L121"><a href="#L121">121</a></th><td class="line-code"><pre>+	fi
</pre></td></tr>


<tr><th class="line-num" id="L122"><a href="#L122">122</a></th><td class="line-code"><pre>+	if [ &quot;$ACTION&quot; = &quot;remove&quot; -o &quot;$ACTION&quot; = &quot;register&quot; ] ; then
</pre></td></tr>


<tr><th class="line-num" id="L123"><a href="#L123">123</a></th><td class="line-code"><pre>+		if [ -e &quot;/tmp/client_bridge/$INTERFACE&quot; ] ; then
</pre></td></tr>


<tr><th class="line-num" id="L124"><a href="#L124">124</a></th><td class="line-code"><pre>+			ebtables -t nat -F PREROUTING
</pre></td></tr>


<tr><th class="line-num" id="L125"><a href="#L125">125</a></th><td class="line-code"><pre>+			ebtables -t nat -F POSTROUTING
</pre></td></tr>


<tr><th class="line-num" id="L126"><a href="#L126">126</a></th><td class="line-code"><pre>+			ebtables -t broute -F BROUTING
</pre></td></tr>


<tr><th class="line-num" id="L127"><a href="#L127">127</a></th><td class="line-code"><pre>+		fi			
</pre></td></tr>


<tr><th class="line-num" id="L128"><a href="#L128">128</a></th><td class="line-code"><pre>+	fi
</pre></td></tr>


<tr><th class="line-num" id="L129"><a href="#L129">129</a></th><td class="line-code"><pre>+fi
</pre></td></tr>


<tr><th class="line-num" id="L130"><a href="#L130">130</a></th><td class="line-code"><pre>--- /dev/null	2012-08-18 22:23:01.258815424 -0400
</pre></td></tr>


<tr><th class="line-num" id="L131"><a href="#L131">131</a></th><td class="line-code"><pre>+++ b/package/ebtables/patches/100-arpnat.patch	2012-08-30 05:30:23.207935551 -0400
</pre></td></tr>


<tr><th class="line-num" id="L132"><a href="#L132">132</a></th><td class="line-code"><pre>@@ -0,0 +1,131 @@
</pre></td></tr>


<tr><th class="line-num" id="L133"><a href="#L133">133</a></th><td class="line-code"><pre>+--- old-ebtables/extensions/ebt_nat.c	2009-09-20 19:06:39.000000000 -0400
</pre></td></tr>


<tr><th class="line-num" id="L134"><a href="#L134">134</a></th><td class="line-code"><pre>++++ ebtables-v2.0.9-1/extensions/ebt_nat.c	2009-09-20 18:50:07.000000000 -0400
</pre></td></tr>


<tr><th class="line-num" id="L135"><a href="#L135">135</a></th><td class="line-code"><pre>+@@ -21,6 +21,9 @@
</pre></td></tr>


<tr><th class="line-num" id="L136"><a href="#L136">136</a></th><td class="line-code"><pre>+ #define NAT_S_TARGET '2'
</pre></td></tr>


<tr><th class="line-num" id="L137"><a href="#L137">137</a></th><td class="line-code"><pre>+ #define NAT_D_TARGET '2'
</pre></td></tr>


<tr><th class="line-num" id="L138"><a href="#L138">138</a></th><td class="line-code"><pre>+ #define NAT_S_ARP '3'
</pre></td></tr>


<tr><th class="line-num" id="L139"><a href="#L139">139</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L140"><a href="#L140">140</a></th><td class="line-code"><pre>++#define NAT_ARP_TARGET '2'
</pre></td></tr>


<tr><th class="line-num" id="L141"><a href="#L141">141</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L142"><a href="#L142">142</a></th><td class="line-code"><pre>+ static struct option opts_s[] =
</pre></td></tr>


<tr><th class="line-num" id="L143"><a href="#L143">143</a></th><td class="line-code"><pre>+ {
</pre></td></tr>


<tr><th class="line-num" id="L144"><a href="#L144">144</a></th><td class="line-code"><pre>+ 	{ &quot;to-source&quot;     , required_argument, 0, NAT_S },
</pre></td></tr>


<tr><th class="line-num" id="L145"><a href="#L145">145</a></th><td class="line-code"><pre>+@@ -30,6 +33,13 @@
</pre></td></tr>


<tr><th class="line-num" id="L146"><a href="#L146">146</a></th><td class="line-code"><pre>+ 	{ 0 }
</pre></td></tr>


<tr><th class="line-num" id="L147"><a href="#L147">147</a></th><td class="line-code"><pre>+ };
</pre></td></tr>


<tr><th class="line-num" id="L148"><a href="#L148">148</a></th><td class="line-code"><pre>+ 
</pre></td></tr>


<tr><th class="line-num" id="L149"><a href="#L149">149</a></th><td class="line-code"><pre>++static struct option opts_arpnat[] =
</pre></td></tr>


<tr><th class="line-num" id="L150"><a href="#L150">150</a></th><td class="line-code"><pre>++{
</pre></td></tr>


<tr><th class="line-num" id="L151"><a href="#L151">151</a></th><td class="line-code"><pre>++	{ &quot;arpnat-target&quot;   , required_argument, 0, NAT_ARP_TARGET },
</pre></td></tr>


<tr><th class="line-num" id="L152"><a href="#L152">152</a></th><td class="line-code"><pre>++	{ 0 }
</pre></td></tr>


<tr><th class="line-num" id="L153"><a href="#L153">153</a></th><td class="line-code"><pre>++};
</pre></td></tr>


<tr><th class="line-num" id="L154"><a href="#L154">154</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L155"><a href="#L155">155</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L156"><a href="#L156">156</a></th><td class="line-code"><pre>+ static struct option opts_d[] =
</pre></td></tr>


<tr><th class="line-num" id="L157"><a href="#L157">157</a></th><td class="line-code"><pre>+ {
</pre></td></tr>


<tr><th class="line-num" id="L158"><a href="#L158">158</a></th><td class="line-code"><pre>+ 	{ &quot;to-destination&quot;, required_argument, 0, NAT_D },
</pre></td></tr>


<tr><th class="line-num" id="L159"><a href="#L159">159</a></th><td class="line-code"><pre>+@@ -47,6 +57,13 @@
</pre></td></tr>


<tr><th class="line-num" id="L160"><a href="#L160">160</a></th><td class="line-code"><pre>+ 	&quot; --snat-arp             : also change src address in arp msg\n&quot;);
</pre></td></tr>


<tr><th class="line-num" id="L161"><a href="#L161">161</a></th><td class="line-code"><pre>+ }
</pre></td></tr>


<tr><th class="line-num" id="L162"><a href="#L162">162</a></th><td class="line-code"><pre>+ 
</pre></td></tr>


<tr><th class="line-num" id="L163"><a href="#L163">163</a></th><td class="line-code"><pre>++static void print_help_arpnat()
</pre></td></tr>


<tr><th class="line-num" id="L164"><a href="#L164">164</a></th><td class="line-code"><pre>++{
</pre></td></tr>


<tr><th class="line-num" id="L165"><a href="#L165">165</a></th><td class="line-code"><pre>++	printf(
</pre></td></tr>


<tr><th class="line-num" id="L166"><a href="#L166">166</a></th><td class="line-code"><pre>++	&quot;arpnat options:\n&quot;
</pre></td></tr>


<tr><th class="line-num" id="L167"><a href="#L167">167</a></th><td class="line-code"><pre>++	&quot; --arpnat-target target   : ACCEPT, DROP, RETURN or CONTINUE\n&quot;);
</pre></td></tr>


<tr><th class="line-num" id="L168"><a href="#L168">168</a></th><td class="line-code"><pre>++}
</pre></td></tr>


<tr><th class="line-num" id="L169"><a href="#L169">169</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L170"><a href="#L170">170</a></th><td class="line-code"><pre>+ static void print_help_d()
</pre></td></tr>


<tr><th class="line-num" id="L171"><a href="#L171">171</a></th><td class="line-code"><pre>+ {
</pre></td></tr>


<tr><th class="line-num" id="L172"><a href="#L172">172</a></th><td class="line-code"><pre>+ 	printf(
</pre></td></tr>


<tr><th class="line-num" id="L173"><a href="#L173">173</a></th><td class="line-code"><pre>+@@ -73,6 +90,57 @@
</pre></td></tr>


<tr><th class="line-num" id="L174"><a href="#L174">174</a></th><td class="line-code"><pre>+ 	return;
</pre></td></tr>


<tr><th class="line-num" id="L175"><a href="#L175">175</a></th><td class="line-code"><pre>+ }
</pre></td></tr>


<tr><th class="line-num" id="L176"><a href="#L176">176</a></th><td class="line-code"><pre>+ 
</pre></td></tr>


<tr><th class="line-num" id="L177"><a href="#L177">177</a></th><td class="line-code"><pre>++static void init_arpnat(struct ebt_entry_target *target)
</pre></td></tr>


<tr><th class="line-num" id="L178"><a href="#L178">178</a></th><td class="line-code"><pre>++{
</pre></td></tr>


<tr><th class="line-num" id="L179"><a href="#L179">179</a></th><td class="line-code"><pre>++	struct ebt_nat_info *natinfo = (struct ebt_nat_info *)target-&gt;data;
</pre></td></tr>


<tr><th class="line-num" id="L180"><a href="#L180">180</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L181"><a href="#L181">181</a></th><td class="line-code"><pre>++	natinfo-&gt;target = EBT_ACCEPT;
</pre></td></tr>


<tr><th class="line-num" id="L182"><a href="#L182">182</a></th><td class="line-code"><pre>++	return;
</pre></td></tr>


<tr><th class="line-num" id="L183"><a href="#L183">183</a></th><td class="line-code"><pre>++}
</pre></td></tr>


<tr><th class="line-num" id="L184"><a href="#L184">184</a></th><td class="line-code"><pre>++#define OPT_ARPNAT_TARGET 0x2
</pre></td></tr>


<tr><th class="line-num" id="L185"><a href="#L185">185</a></th><td class="line-code"><pre>++static int parse_arpnat(int c, char **argv, int argc,
</pre></td></tr>


<tr><th class="line-num" id="L186"><a href="#L186">186</a></th><td class="line-code"><pre>++   const struct ebt_u_entry *entry, unsigned int *flags,
</pre></td></tr>


<tr><th class="line-num" id="L187"><a href="#L187">187</a></th><td class="line-code"><pre>++   struct ebt_entry_target **target)
</pre></td></tr>


<tr><th class="line-num" id="L188"><a href="#L188">188</a></th><td class="line-code"><pre>++{
</pre></td></tr>


<tr><th class="line-num" id="L189"><a href="#L189">189</a></th><td class="line-code"><pre>++	struct ebt_nat_info *natinfo = (struct ebt_nat_info *)(*target)-&gt;data;
</pre></td></tr>


<tr><th class="line-num" id="L190"><a href="#L190">190</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L191"><a href="#L191">191</a></th><td class="line-code"><pre>++	switch (c) {
</pre></td></tr>


<tr><th class="line-num" id="L192"><a href="#L192">192</a></th><td class="line-code"><pre>++	case NAT_ARP_TARGET:
</pre></td></tr>


<tr><th class="line-num" id="L193"><a href="#L193">193</a></th><td class="line-code"><pre>++		ebt_check_option2(flags, OPT_ARPNAT_TARGET);
</pre></td></tr>


<tr><th class="line-num" id="L194"><a href="#L194">194</a></th><td class="line-code"><pre>++		if (FILL_TARGET(optarg, natinfo-&gt;target))
</pre></td></tr>


<tr><th class="line-num" id="L195"><a href="#L195">195</a></th><td class="line-code"><pre>++			ebt_print_error2(&quot;Illegal --arpnat-target target&quot;);
</pre></td></tr>


<tr><th class="line-num" id="L196"><a href="#L196">196</a></th><td class="line-code"><pre>++		break;
</pre></td></tr>


<tr><th class="line-num" id="L197"><a href="#L197">197</a></th><td class="line-code"><pre>++	default:
</pre></td></tr>


<tr><th class="line-num" id="L198"><a href="#L198">198</a></th><td class="line-code"><pre>++		return 0;
</pre></td></tr>


<tr><th class="line-num" id="L199"><a href="#L199">199</a></th><td class="line-code"><pre>++	}
</pre></td></tr>


<tr><th class="line-num" id="L200"><a href="#L200">200</a></th><td class="line-code"><pre>++	return 1;
</pre></td></tr>


<tr><th class="line-num" id="L201"><a href="#L201">201</a></th><td class="line-code"><pre>++}
</pre></td></tr>


<tr><th class="line-num" id="L202"><a href="#L202">202</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L203"><a href="#L203">203</a></th><td class="line-code"><pre>++static void final_check_arpnat(const struct ebt_u_entry *entry,
</pre></td></tr>


<tr><th class="line-num" id="L204"><a href="#L204">204</a></th><td class="line-code"><pre>++   const struct ebt_entry_target *target, const char *name,
</pre></td></tr>


<tr><th class="line-num" id="L205"><a href="#L205">205</a></th><td class="line-code"><pre>++   unsigned int hookmask, unsigned int time)
</pre></td></tr>


<tr><th class="line-num" id="L206"><a href="#L206">206</a></th><td class="line-code"><pre>++{
</pre></td></tr>


<tr><th class="line-num" id="L207"><a href="#L207">207</a></th><td class="line-code"><pre>++	struct ebt_nat_info *natinfo = (struct ebt_nat_info *)target-&gt;data;
</pre></td></tr>


<tr><th class="line-num" id="L208"><a href="#L208">208</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L209"><a href="#L209">209</a></th><td class="line-code"><pre>++	if (BASE_CHAIN &amp;&amp; natinfo-&gt;target == EBT_RETURN)
</pre></td></tr>


<tr><th class="line-num" id="L210"><a href="#L210">210</a></th><td class="line-code"><pre>++		ebt_print_error(&quot;--arpnat-target RETURN not allowed on base chain&quot;);
</pre></td></tr>


<tr><th class="line-num" id="L211"><a href="#L211">211</a></th><td class="line-code"><pre>++	CLEAR_BASE_CHAIN_BIT;
</pre></td></tr>


<tr><th class="line-num" id="L212"><a href="#L212">212</a></th><td class="line-code"><pre>++	if (((hookmask &amp; ~((1 &lt;&lt; NF_BR_PRE_ROUTING) | (1 &lt;&lt; NF_BR_POST_ROUTING)))
</pre></td></tr>


<tr><th class="line-num" id="L213"><a href="#L213">213</a></th><td class="line-code"><pre>++	   || strcmp(name, &quot;nat&quot;)))
</pre></td></tr>


<tr><th class="line-num" id="L214"><a href="#L214">214</a></th><td class="line-code"><pre>++		ebt_print_error(&quot;Wrong chain for arpnat&quot;);
</pre></td></tr>


<tr><th class="line-num" id="L215"><a href="#L215">215</a></th><td class="line-code"><pre>++}
</pre></td></tr>


<tr><th class="line-num" id="L216"><a href="#L216">216</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L217"><a href="#L217">217</a></th><td class="line-code"><pre>++static void print_arpnat(const struct ebt_u_entry *entry,
</pre></td></tr>


<tr><th class="line-num" id="L218"><a href="#L218">218</a></th><td class="line-code"><pre>++   const struct ebt_entry_target *target)
</pre></td></tr>


<tr><th class="line-num" id="L219"><a href="#L219">219</a></th><td class="line-code"><pre>++{
</pre></td></tr>


<tr><th class="line-num" id="L220"><a href="#L220">220</a></th><td class="line-code"><pre>++	struct ebt_nat_info *natinfo = (struct ebt_nat_info *)target-&gt;data;
</pre></td></tr>


<tr><th class="line-num" id="L221"><a href="#L221">221</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L222"><a href="#L222">222</a></th><td class="line-code"><pre>++	printf(&quot; --arpnat-target %s&quot;, TARGET_NAME(natinfo-&gt;target));
</pre></td></tr>


<tr><th class="line-num" id="L223"><a href="#L223">223</a></th><td class="line-code"><pre>++}
</pre></td></tr>


<tr><th class="line-num" id="L224"><a href="#L224">224</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L225"><a href="#L225">225</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L226"><a href="#L226">226</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L227"><a href="#L227">227</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L228"><a href="#L228">228</a></th><td class="line-code"><pre>+ #define OPT_SNAT         0x01
</pre></td></tr>


<tr><th class="line-num" id="L229"><a href="#L229">229</a></th><td class="line-code"><pre>+ #define OPT_SNAT_TARGET  0x02
</pre></td></tr>


<tr><th class="line-num" id="L230"><a href="#L230">230</a></th><td class="line-code"><pre>+ #define OPT_SNAT_ARP     0x04
</pre></td></tr>


<tr><th class="line-num" id="L231"><a href="#L231">231</a></th><td class="line-code"><pre>+@@ -230,9 +298,23 @@
</pre></td></tr>


<tr><th class="line-num" id="L232"><a href="#L232">232</a></th><td class="line-code"><pre>+ 	.compare	= compare,
</pre></td></tr>


<tr><th class="line-num" id="L233"><a href="#L233">233</a></th><td class="line-code"><pre>+ 	.extra_ops	= opts_d,
</pre></td></tr>


<tr><th class="line-num" id="L234"><a href="#L234">234</a></th><td class="line-code"><pre>+ };
</pre></td></tr>


<tr><th class="line-num" id="L235"><a href="#L235">235</a></th><td class="line-code"><pre>++static struct ebt_u_target arpnat_target =
</pre></td></tr>


<tr><th class="line-num" id="L236"><a href="#L236">236</a></th><td class="line-code"><pre>++{
</pre></td></tr>


<tr><th class="line-num" id="L237"><a href="#L237">237</a></th><td class="line-code"><pre>++	.name		= EBT_ARPNAT_TARGET,
</pre></td></tr>


<tr><th class="line-num" id="L238"><a href="#L238">238</a></th><td class="line-code"><pre>++	.size		= sizeof(struct ebt_nat_info),
</pre></td></tr>


<tr><th class="line-num" id="L239"><a href="#L239">239</a></th><td class="line-code"><pre>++	.help		= print_help_arpnat,
</pre></td></tr>


<tr><th class="line-num" id="L240"><a href="#L240">240</a></th><td class="line-code"><pre>++	.init		= init_arpnat,
</pre></td></tr>


<tr><th class="line-num" id="L241"><a href="#L241">241</a></th><td class="line-code"><pre>++	.parse		= parse_arpnat,
</pre></td></tr>


<tr><th class="line-num" id="L242"><a href="#L242">242</a></th><td class="line-code"><pre>++	.final_check	= final_check_arpnat,
</pre></td></tr>


<tr><th class="line-num" id="L243"><a href="#L243">243</a></th><td class="line-code"><pre>++	.print		= print_arpnat,
</pre></td></tr>


<tr><th class="line-num" id="L244"><a href="#L244">244</a></th><td class="line-code"><pre>++	.compare	= compare,
</pre></td></tr>


<tr><th class="line-num" id="L245"><a href="#L245">245</a></th><td class="line-code"><pre>++	.extra_ops	= opts_arpnat,
</pre></td></tr>


<tr><th class="line-num" id="L246"><a href="#L246">246</a></th><td class="line-code"><pre>++};
</pre></td></tr>


<tr><th class="line-num" id="L247"><a href="#L247">247</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L248"><a href="#L248">248</a></th><td class="line-code"><pre>+ 
</pre></td></tr>


<tr><th class="line-num" id="L249"><a href="#L249">249</a></th><td class="line-code"><pre>+ void _init(void)
</pre></td></tr>


<tr><th class="line-num" id="L250"><a href="#L250">250</a></th><td class="line-code"><pre>+ {
</pre></td></tr>


<tr><th class="line-num" id="L251"><a href="#L251">251</a></th><td class="line-code"><pre>+ 	ebt_register_target(&amp;snat_target);
</pre></td></tr>


<tr><th class="line-num" id="L252"><a href="#L252">252</a></th><td class="line-code"><pre>+ 	ebt_register_target(&amp;dnat_target);
</pre></td></tr>


<tr><th class="line-num" id="L253"><a href="#L253">253</a></th><td class="line-code"><pre>++	ebt_register_target(&amp;arpnat_target);
</pre></td></tr>


<tr><th class="line-num" id="L254"><a href="#L254">254</a></th><td class="line-code"><pre>+ }
</pre></td></tr>


<tr><th class="line-num" id="L255"><a href="#L255">255</a></th><td class="line-code"><pre>+--- old-ebtables/include/linux/netfilter_bridge/ebt_nat.h	2009-09-20 19:06:39.000000000 -0400
</pre></td></tr>


<tr><th class="line-num" id="L256"><a href="#L256">256</a></th><td class="line-code"><pre>++++ ebtables-v2.0.9-1/include/linux/netfilter_bridge/ebt_nat.h	2009-09-20 18:53:58.000000000 -0400
</pre></td></tr>


<tr><th class="line-num" id="L257"><a href="#L257">257</a></th><td class="line-code"><pre>+@@ -10,5 +10,5 @@
</pre></td></tr>


<tr><th class="line-num" id="L258"><a href="#L258">258</a></th><td class="line-code"><pre>+ };
</pre></td></tr>


<tr><th class="line-num" id="L259"><a href="#L259">259</a></th><td class="line-code"><pre>+ #define EBT_SNAT_TARGET &quot;snat&quot;
</pre></td></tr>


<tr><th class="line-num" id="L260"><a href="#L260">260</a></th><td class="line-code"><pre>+ #define EBT_DNAT_TARGET &quot;dnat&quot;
</pre></td></tr>


<tr><th class="line-num" id="L261"><a href="#L261">261</a></th><td class="line-code"><pre>+-
</pre></td></tr>


<tr><th class="line-num" id="L262"><a href="#L262">262</a></th><td class="line-code"><pre>++#define EBT_ARPNAT_TARGET &quot;arpnat&quot;
</pre></td></tr>


<tr><th class="line-num" id="L263"><a href="#L263">263</a></th><td class="line-code"><pre>+ #endif
</pre></td></tr>


<tr><th class="line-num" id="L264"><a href="#L264">264</a></th><td class="line-code"><pre>--- /dev/null	2012-08-18 22:23:01.258815424 -0400
</pre></td></tr>


<tr><th class="line-num" id="L265"><a href="#L265">265</a></th><td class="line-code"><pre>+++ custom-src/target/linux/generic/patches-3.3/666-arpnat.patch	2012-08-30 07:41:55.628586225 -0400
</pre></td></tr>


<tr><th class="line-num" id="L266"><a href="#L266">266</a></th><td class="line-code"><pre>@@ -0,0 +1,683 @@
</pre></td></tr>


<tr><th class="line-num" id="L267"><a href="#L267">267</a></th><td class="line-code"><pre>+--- linux-old/net/bridge/br_fdb.c	2009-09-15 13:46:05.000000000 -0400
</pre></td></tr>


<tr><th class="line-num" id="L268"><a href="#L268">268</a></th><td class="line-code"><pre>++++ linux-2.6.30.7/net/bridge/br_fdb.c	2009-09-22 19:52:51.000000000 -0400
</pre></td></tr>


<tr><th class="line-num" id="L269"><a href="#L269">269</a></th><td class="line-code"><pre>+@@ -415,3 +415,5 @@
</pre></td></tr>


<tr><th class="line-num" id="L270"><a href="#L270">270</a></th><td class="line-code"><pre>+ 		spin_unlock(&amp;br-&gt;hash_lock);
</pre></td></tr>


<tr><th class="line-num" id="L271"><a href="#L271">271</a></th><td class="line-code"><pre>+ 	}
</pre></td></tr>


<tr><th class="line-num" id="L272"><a href="#L272">272</a></th><td class="line-code"><pre>+ }
</pre></td></tr>


<tr><th class="line-num" id="L273"><a href="#L273">273</a></th><td class="line-code"><pre>++EXPORT_SYMBOL(br_fdb_get);
</pre></td></tr>


<tr><th class="line-num" id="L274"><a href="#L274">274</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L275"><a href="#L275">275</a></th><td class="line-code"><pre>+--- linux-2.6.30.7-orig/net/bridge/netfilter/Makefile	2009-09-15 13:46:05.000000000 -0400
</pre></td></tr>


<tr><th class="line-num" id="L276"><a href="#L276">276</a></th><td class="line-code"><pre>++++ linux-2.6.30.7/net/bridge/netfilter/Makefile	2009-09-20 16:04:20.000000000 -0400
</pre></td></tr>


<tr><th class="line-num" id="L277"><a href="#L277">277</a></th><td class="line-code"><pre>+@@ -27,6 +27,7 @@
</pre></td></tr>


<tr><th class="line-num" id="L278"><a href="#L278">278</a></th><td class="line-code"><pre>+ obj-$(CONFIG_BRIDGE_EBT_DNAT) += ebt_dnat.o
</pre></td></tr>


<tr><th class="line-num" id="L279"><a href="#L279">279</a></th><td class="line-code"><pre>+ obj-$(CONFIG_BRIDGE_EBT_REDIRECT) += ebt_redirect.o
</pre></td></tr>


<tr><th class="line-num" id="L280"><a href="#L280">280</a></th><td class="line-code"><pre>+ obj-$(CONFIG_BRIDGE_EBT_SNAT) += ebt_snat.o
</pre></td></tr>


<tr><th class="line-num" id="L281"><a href="#L281">281</a></th><td class="line-code"><pre>++obj-$(CONFIG_BRIDGE_EBT_ARPNAT) += ebt_arpnat.o
</pre></td></tr>


<tr><th class="line-num" id="L282"><a href="#L282">282</a></th><td class="line-code"><pre>+ 
</pre></td></tr>


<tr><th class="line-num" id="L283"><a href="#L283">283</a></th><td class="line-code"><pre>+ # watchers
</pre></td></tr>


<tr><th class="line-num" id="L284"><a href="#L284">284</a></th><td class="line-code"><pre>+ obj-$(CONFIG_BRIDGE_EBT_LOG) += ebt_log.o
</pre></td></tr>


<tr><th class="line-num" id="L285"><a href="#L285">285</a></th><td class="line-code"><pre>+--- linux-2.6.30.7-orig/net/bridge/netfilter/Kconfig	2009-09-15 13:46:05.000000000 -0400
</pre></td></tr>


<tr><th class="line-num" id="L286"><a href="#L286">286</a></th><td class="line-code"><pre>++++ linux-2.6.30.7/net/bridge/netfilter/Kconfig	2009-09-20 16:05:32.000000000 -0400
</pre></td></tr>


<tr><th class="line-num" id="L287"><a href="#L287">287</a></th><td class="line-code"><pre>+@@ -177,6 +177,16 @@
</pre></td></tr>


<tr><th class="line-num" id="L288"><a href="#L288">288</a></th><td class="line-code"><pre>+ 	  source address of frames.
</pre></td></tr>


<tr><th class="line-num" id="L289"><a href="#L289">289</a></th><td class="line-code"><pre>+ 
</pre></td></tr>


<tr><th class="line-num" id="L290"><a href="#L290">290</a></th><td class="line-code"><pre>+ 	  To compile it as a module, choose M here.  If unsure, say N.
</pre></td></tr>


<tr><th class="line-num" id="L291"><a href="#L291">291</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L292"><a href="#L292">292</a></th><td class="line-code"><pre>++config BRIDGE_EBT_ARPNAT
</pre></td></tr>


<tr><th class="line-num" id="L293"><a href="#L293">293</a></th><td class="line-code"><pre>++	tristate &quot;ebt: arpnat target support&quot;
</pre></td></tr>


<tr><th class="line-num" id="L294"><a href="#L294">294</a></th><td class="line-code"><pre>++	depends on BRIDGE_NF_EBTABLES
</pre></td></tr>


<tr><th class="line-num" id="L295"><a href="#L295">295</a></th><td class="line-code"><pre>++	help
</pre></td></tr>


<tr><th class="line-num" id="L296"><a href="#L296">296</a></th><td class="line-code"><pre>++	  This option adds the ARP match, which allows ARP and RARP header field
</pre></td></tr>


<tr><th class="line-num" id="L297"><a href="#L297">297</a></th><td class="line-code"><pre>++	  filtering
</pre></td></tr>


<tr><th class="line-num" id="L298"><a href="#L298">298</a></th><td class="line-code"><pre>++ 
</pre></td></tr>


<tr><th class="line-num" id="L299"><a href="#L299">299</a></th><td class="line-code"><pre>++	  To compile it as a module, choose M here. If unsure, say N.
</pre></td></tr>


<tr><th class="line-num" id="L300"><a href="#L300">300</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L301"><a href="#L301">301</a></th><td class="line-code"><pre>+ #
</pre></td></tr>


<tr><th class="line-num" id="L302"><a href="#L302">302</a></th><td class="line-code"><pre>+ # watchers
</pre></td></tr>


<tr><th class="line-num" id="L303"><a href="#L303">303</a></th><td class="line-code"><pre>+ #
</pre></td></tr>


<tr><th class="line-num" id="L304"><a href="#L304">304</a></th><td class="line-code"><pre>+--- linux-2.6.30.7-orig/include/linux/netfilter_bridge/ebt_nat.h	2009-09-15 13:46:05.000000000 -0400
</pre></td></tr>


<tr><th class="line-num" id="L305"><a href="#L305">305</a></th><td class="line-code"><pre>++++ linux-2.6.30.7/include/linux/netfilter_bridge/ebt_nat.h	2009-09-20 16:06:35.000000000 -0400
</pre></td></tr>


<tr><th class="line-num" id="L306"><a href="#L306">306</a></th><td class="line-code"><pre>+@@ -10,5 +10,6 @@
</pre></td></tr>


<tr><th class="line-num" id="L307"><a href="#L307">307</a></th><td class="line-code"><pre>+ };
</pre></td></tr>


<tr><th class="line-num" id="L308"><a href="#L308">308</a></th><td class="line-code"><pre>+ #define EBT_SNAT_TARGET &quot;snat&quot;
</pre></td></tr>


<tr><th class="line-num" id="L309"><a href="#L309">309</a></th><td class="line-code"><pre>+ #define EBT_DNAT_TARGET &quot;dnat&quot;
</pre></td></tr>


<tr><th class="line-num" id="L310"><a href="#L310">310</a></th><td class="line-code"><pre>++#define EBT_ARPNAT_TARGET &quot;arpnat&quot;
</pre></td></tr>


<tr><th class="line-num" id="L311"><a href="#L311">311</a></th><td class="line-code"><pre>+ 
</pre></td></tr>


<tr><th class="line-num" id="L312"><a href="#L312">312</a></th><td class="line-code"><pre>+ #endif
</pre></td></tr>


<tr><th class="line-num" id="L313"><a href="#L313">313</a></th><td class="line-code"><pre>+--- linux.orig/net/ipv4/devinet.c	2012-06-01 03:16:13.000000000 -0400
</pre></td></tr>


<tr><th class="line-num" id="L314"><a href="#L314">314</a></th><td class="line-code"><pre>++++ linux.new/net/ipv4/devinet.c	2012-08-30 06:13:36.844740505 -0400
</pre></td></tr>


<tr><th class="line-num" id="L315"><a href="#L315">315</a></th><td class="line-code"><pre>+@@ -1842,4 +1842,4 @@
</pre></td></tr>


<tr><th class="line-num" id="L316"><a href="#L316">316</a></th><td class="line-code"><pre>+ 	rtnl_register(PF_INET, RTM_DELADDR, inet_rtm_deladdr, NULL, NULL);
</pre></td></tr>


<tr><th class="line-num" id="L317"><a href="#L317">317</a></th><td class="line-code"><pre>+ 	rtnl_register(PF_INET, RTM_GETADDR, NULL, inet_dump_ifaddr, NULL);
</pre></td></tr>


<tr><th class="line-num" id="L318"><a href="#L318">318</a></th><td class="line-code"><pre>+ }
</pre></td></tr>


<tr><th class="line-num" id="L319"><a href="#L319">319</a></th><td class="line-code"><pre>+-
</pre></td></tr>


<tr><th class="line-num" id="L320"><a href="#L320">320</a></th><td class="line-code"><pre>++EXPORT_SYMBOL(inet_confirm_addr);
</pre></td></tr>


<tr><th class="line-num" id="L321"><a href="#L321">321</a></th><td class="line-code"><pre>+--- /dev/null	2012-08-18 22:23:01.258815424 -0400
</pre></td></tr>


<tr><th class="line-num" id="L322"><a href="#L322">322</a></th><td class="line-code"><pre>++++ linux-3.3.8/net/bridge/netfilter/ebt_arpnat.c	2012-08-30 07:37:48.220576042 -0400
</pre></td></tr>


<tr><th class="line-num" id="L323"><a href="#L323">323</a></th><td class="line-code"><pre>+@@ -0,0 +1,626 @@
</pre></td></tr>


<tr><th class="line-num" id="L324"><a href="#L324">324</a></th><td class="line-code"><pre>++/*
</pre></td></tr>


<tr><th class="line-num" id="L325"><a href="#L325">325</a></th><td class="line-code"><pre>++ *  ebt_arpnat
</pre></td></tr>


<tr><th class="line-num" id="L326"><a href="#L326">326</a></th><td class="line-code"><pre>++ *
</pre></td></tr>


<tr><th class="line-num" id="L327"><a href="#L327">327</a></th><td class="line-code"><pre>++ *	Authors:
</pre></td></tr>


<tr><th class="line-num" id="L328"><a href="#L328">328</a></th><td class="line-code"><pre>++ *      Kestutis Barkauskas &lt;gpl@wilibox.com&gt;
</pre></td></tr>


<tr><th class="line-num" id="L329"><a href="#L329">329</a></th><td class="line-code"><pre>++ *
</pre></td></tr>


<tr><th class="line-num" id="L330"><a href="#L330">330</a></th><td class="line-code"><pre>++ *  November, 2005
</pre></td></tr>


<tr><th class="line-num" id="L331"><a href="#L331">331</a></th><td class="line-code"><pre>++ *
</pre></td></tr>


<tr><th class="line-num" id="L332"><a href="#L332">332</a></th><td class="line-code"><pre>++ *	Rewritten by:
</pre></td></tr>


<tr><th class="line-num" id="L333"><a href="#L333">333</a></th><td class="line-code"><pre>++ *         Kestutis Barkauskas and Kestutis Kupciunas &lt;gpl@ubnt.com&gt;
</pre></td></tr>


<tr><th class="line-num" id="L334"><a href="#L334">334</a></th><td class="line-code"><pre>++ *
</pre></td></tr>


<tr><th class="line-num" id="L335"><a href="#L335">335</a></th><td class="line-code"><pre>++ *  June, 2010
</pre></td></tr>


<tr><th class="line-num" id="L336"><a href="#L336">336</a></th><td class="line-code"><pre>++ *
</pre></td></tr>


<tr><th class="line-num" id="L337"><a href="#L337">337</a></th><td class="line-code"><pre>++ *      Updated to work with more recent kernel versions (e.g., 2.6.30)
</pre></td></tr>


<tr><th class="line-num" id="L338"><a href="#L338">338</a></th><td class="line-code"><pre>++ *      Ditched entry expiration in favor of wiping entries with duplicate ips, when situation arises
</pre></td></tr>


<tr><th class="line-num" id="L339"><a href="#L339">339</a></th><td class="line-code"><pre>++ *      Fixed arpnat procfs (though both arpnat_cache and arpnat_info are both in root procfs directory now)
</pre></td></tr>


<tr><th class="line-num" id="L340"><a href="#L340">340</a></th><td class="line-code"><pre>++ *      
</pre></td></tr>


<tr><th class="line-num" id="L341"><a href="#L341">341</a></th><td class="line-code"><pre>++ *      Eric Bishop &lt;eric@gargoyle-router.com&gt;
</pre></td></tr>


<tr><th class="line-num" id="L342"><a href="#L342">342</a></th><td class="line-code"><pre>++ */
</pre></td></tr>


<tr><th class="line-num" id="L343"><a href="#L343">343</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L344"><a href="#L344">344</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L345"><a href="#L345">345</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L346"><a href="#L346">346</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L347"><a href="#L347">347</a></th><td class="line-code"><pre>++#include &lt;linux/netfilter/x_tables.h&gt;
</pre></td></tr>


<tr><th class="line-num" id="L348"><a href="#L348">348</a></th><td class="line-code"><pre>++#include &lt;linux/netfilter_bridge/ebtables.h&gt;
</pre></td></tr>


<tr><th class="line-num" id="L349"><a href="#L349">349</a></th><td class="line-code"><pre>++#include &lt;linux/netfilter_bridge/ebt_nat.h&gt;
</pre></td></tr>


<tr><th class="line-num" id="L350"><a href="#L350">350</a></th><td class="line-code"><pre>++#include &lt;linux/module.h&gt;
</pre></td></tr>


<tr><th class="line-num" id="L351"><a href="#L351">351</a></th><td class="line-code"><pre>++#include &lt;linux/if_arp.h&gt;
</pre></td></tr>


<tr><th class="line-num" id="L352"><a href="#L352">352</a></th><td class="line-code"><pre>++#include &lt;linux/if_ether.h&gt;
</pre></td></tr>


<tr><th class="line-num" id="L353"><a href="#L353">353</a></th><td class="line-code"><pre>++#include &lt;linux/if_pppox.h&gt;
</pre></td></tr>


<tr><th class="line-num" id="L354"><a href="#L354">354</a></th><td class="line-code"><pre>++#include &lt;linux/if_vlan.h&gt;
</pre></td></tr>


<tr><th class="line-num" id="L355"><a href="#L355">355</a></th><td class="line-code"><pre>++#include &lt;linux/rtnetlink.h&gt;
</pre></td></tr>


<tr><th class="line-num" id="L356"><a href="#L356">356</a></th><td class="line-code"><pre>++#include &lt;linux/list.h&gt;
</pre></td></tr>


<tr><th class="line-num" id="L357"><a href="#L357">357</a></th><td class="line-code"><pre>++#include &lt;linux/spinlock.h&gt;
</pre></td></tr>


<tr><th class="line-num" id="L358"><a href="#L358">358</a></th><td class="line-code"><pre>++#include &lt;linux/proc_fs.h&gt;
</pre></td></tr>


<tr><th class="line-num" id="L359"><a href="#L359">359</a></th><td class="line-code"><pre>++#include &lt;linux/inetdevice.h&gt;
</pre></td></tr>


<tr><th class="line-num" id="L360"><a href="#L360">360</a></th><td class="line-code"><pre>++#include &lt;net/arp.h&gt;
</pre></td></tr>


<tr><th class="line-num" id="L361"><a href="#L361">361</a></th><td class="line-code"><pre>++#include &lt;net/ip.h&gt;
</pre></td></tr>


<tr><th class="line-num" id="L362"><a href="#L362">362</a></th><td class="line-code"><pre>++#include &lt;linux/ip.h&gt;
</pre></td></tr>


<tr><th class="line-num" id="L363"><a href="#L363">363</a></th><td class="line-code"><pre>++#include &lt;linux/udp.h&gt;
</pre></td></tr>


<tr><th class="line-num" id="L364"><a href="#L364">364</a></th><td class="line-code"><pre>++#include &lt;linux/in.h&gt;
</pre></td></tr>


<tr><th class="line-num" id="L365"><a href="#L365">365</a></th><td class="line-code"><pre>++#include &lt;net/checksum.h&gt;
</pre></td></tr>


<tr><th class="line-num" id="L366"><a href="#L366">366</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L367"><a href="#L367">367</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L368"><a href="#L368">368</a></th><td class="line-code"><pre>++#include &quot;../br_private.h&quot;
</pre></td></tr>


<tr><th class="line-num" id="L369"><a href="#L369">369</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L370"><a href="#L370">370</a></th><td class="line-code"><pre>++#define STRMAC &quot;%02x:%02x:%02x:%02x:%02x:%02x&quot;
</pre></td></tr>


<tr><th class="line-num" id="L371"><a href="#L371">371</a></th><td class="line-code"><pre>++#define STRIP &quot;%d.%d.%d.%d&quot;
</pre></td></tr>


<tr><th class="line-num" id="L372"><a href="#L372">372</a></th><td class="line-code"><pre>++#define MAC2STR(x) (x)[0],(x)[1],(x)[2],(x)[3],(x)[4],(x)[5]
</pre></td></tr>


<tr><th class="line-num" id="L373"><a href="#L373">373</a></th><td class="line-code"><pre>++#define IP2STR(x) (x)&gt;&gt;24&amp;0xff,(x)&gt;&gt;16&amp;0xff,(x)&gt;&gt;8&amp;0xff,(x)&amp;0xff
</pre></td></tr>


<tr><th class="line-num" id="L374"><a href="#L374">374</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L375"><a href="#L375">375</a></th><td class="line-code"><pre>++#define GIADDR_OFFSET (24)
</pre></td></tr>


<tr><th class="line-num" id="L376"><a href="#L376">376</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L377"><a href="#L377">377</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L378"><a href="#L378">378</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L379"><a href="#L379">379</a></th><td class="line-code"><pre>++//#define ARPNAT_DEBUG 1
</pre></td></tr>


<tr><th class="line-num" id="L380"><a href="#L380">380</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L381"><a href="#L381">381</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L382"><a href="#L382">382</a></th><td class="line-code"><pre>++#ifdef ARPNAT_DEBUG
</pre></td></tr>


<tr><th class="line-num" id="L383"><a href="#L383">383</a></th><td class="line-code"><pre>++static uint8_t debug = 1;
</pre></td></tr>


<tr><th class="line-num" id="L384"><a href="#L384">384</a></th><td class="line-code"><pre>++#else
</pre></td></tr>


<tr><th class="line-num" id="L385"><a href="#L385">385</a></th><td class="line-code"><pre>++static uint8_t debug = 0;
</pre></td></tr>


<tr><th class="line-num" id="L386"><a href="#L386">386</a></th><td class="line-code"><pre>++#endif
</pre></td></tr>


<tr><th class="line-num" id="L387"><a href="#L387">387</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L388"><a href="#L388">388</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L389"><a href="#L389">389</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L390"><a href="#L390">390</a></th><td class="line-code"><pre>++#ifndef __packed
</pre></td></tr>


<tr><th class="line-num" id="L391"><a href="#L391">391</a></th><td class="line-code"><pre>++#define __packed __attribute__((__packed__))
</pre></td></tr>


<tr><th class="line-num" id="L392"><a href="#L392">392</a></th><td class="line-code"><pre>++#endif
</pre></td></tr>


<tr><th class="line-num" id="L393"><a href="#L393">393</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L394"><a href="#L394">394</a></th><td class="line-code"><pre>++struct arpnat_dat
</pre></td></tr>


<tr><th class="line-num" id="L395"><a href="#L395">395</a></th><td class="line-code"><pre>++{
</pre></td></tr>


<tr><th class="line-num" id="L396"><a href="#L396">396</a></th><td class="line-code"><pre>++	uint32_t ip;
</pre></td></tr>


<tr><th class="line-num" id="L397"><a href="#L397">397</a></th><td class="line-code"><pre>++	uint8_t mac[ETH_ALEN];
</pre></td></tr>


<tr><th class="line-num" id="L398"><a href="#L398">398</a></th><td class="line-code"><pre>++} __packed;
</pre></td></tr>


<tr><th class="line-num" id="L399"><a href="#L399">399</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L400"><a href="#L400">400</a></th><td class="line-code"><pre>++struct mac2ip
</pre></td></tr>


<tr><th class="line-num" id="L401"><a href="#L401">401</a></th><td class="line-code"><pre>++{
</pre></td></tr>


<tr><th class="line-num" id="L402"><a href="#L402">402</a></th><td class="line-code"><pre>++	struct hlist_node node;
</pre></td></tr>


<tr><th class="line-num" id="L403"><a href="#L403">403</a></th><td class="line-code"><pre>++	struct arpnat_dat data;
</pre></td></tr>


<tr><th class="line-num" id="L404"><a href="#L404">404</a></th><td class="line-code"><pre>++};
</pre></td></tr>


<tr><th class="line-num" id="L405"><a href="#L405">405</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L406"><a href="#L406">406</a></th><td class="line-code"><pre>++static HLIST_HEAD(arpnat_table);
</pre></td></tr>


<tr><th class="line-num" id="L407"><a href="#L407">407</a></th><td class="line-code"><pre>++static spinlock_t arpnat_lock = __SPIN_LOCK_UNLOCKED(arpnat_lock);
</pre></td></tr>


<tr><th class="line-num" id="L408"><a href="#L408">408</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L409"><a href="#L409">409</a></th><td class="line-code"><pre>++static uint8_t bootpnat = 1;
</pre></td></tr>


<tr><th class="line-num" id="L410"><a href="#L410">410</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L411"><a href="#L411">411</a></th><td class="line-code"><pre>++static struct mac2ip* find_mac_nat(struct hlist_head* head, const uint8_t* mac)
</pre></td></tr>


<tr><th class="line-num" id="L412"><a href="#L412">412</a></th><td class="line-code"><pre>++{
</pre></td></tr>


<tr><th class="line-num" id="L413"><a href="#L413">413</a></th><td class="line-code"><pre>++	struct mac2ip* tpos;
</pre></td></tr>


<tr><th class="line-num" id="L414"><a href="#L414">414</a></th><td class="line-code"><pre>++	struct mac2ip* result = NULL;
</pre></td></tr>


<tr><th class="line-num" id="L415"><a href="#L415">415</a></th><td class="line-code"><pre>++	struct hlist_node* pos;
</pre></td></tr>


<tr><th class="line-num" id="L416"><a href="#L416">416</a></th><td class="line-code"><pre>++	struct hlist_node* n;
</pre></td></tr>


<tr><th class="line-num" id="L417"><a href="#L417">417</a></th><td class="line-code"><pre>++	hlist_for_each_entry_safe(tpos, pos, n, head, node)
</pre></td></tr>


<tr><th class="line-num" id="L418"><a href="#L418">418</a></th><td class="line-code"><pre>++	{
</pre></td></tr>


<tr><th class="line-num" id="L419"><a href="#L419">419</a></th><td class="line-code"><pre>++		if (memcmp(tpos-&gt;data.mac, mac, ETH_ALEN) == 0)
</pre></td></tr>


<tr><th class="line-num" id="L420"><a href="#L420">420</a></th><td class="line-code"><pre>++		{
</pre></td></tr>


<tr><th class="line-num" id="L421"><a href="#L421">421</a></th><td class="line-code"><pre>++			result = tpos;
</pre></td></tr>


<tr><th class="line-num" id="L422"><a href="#L422">422</a></th><td class="line-code"><pre>++			break;
</pre></td></tr>


<tr><th class="line-num" id="L423"><a href="#L423">423</a></th><td class="line-code"><pre>++		}
</pre></td></tr>


<tr><th class="line-num" id="L424"><a href="#L424">424</a></th><td class="line-code"><pre>++	}
</pre></td></tr>


<tr><th class="line-num" id="L425"><a href="#L425">425</a></th><td class="line-code"><pre>++	return result;
</pre></td></tr>


<tr><th class="line-num" id="L426"><a href="#L426">426</a></th><td class="line-code"><pre>++}
</pre></td></tr>


<tr><th class="line-num" id="L427"><a href="#L427">427</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L428"><a href="#L428">428</a></th><td class="line-code"><pre>++static struct mac2ip* find_ip_nat(struct hlist_head* head, uint32_t ip)
</pre></td></tr>


<tr><th class="line-num" id="L429"><a href="#L429">429</a></th><td class="line-code"><pre>++{
</pre></td></tr>


<tr><th class="line-num" id="L430"><a href="#L430">430</a></th><td class="line-code"><pre>++	struct mac2ip* tpos;
</pre></td></tr>


<tr><th class="line-num" id="L431"><a href="#L431">431</a></th><td class="line-code"><pre>++	struct mac2ip* result = NULL;
</pre></td></tr>


<tr><th class="line-num" id="L432"><a href="#L432">432</a></th><td class="line-code"><pre>++	struct hlist_node* pos;
</pre></td></tr>


<tr><th class="line-num" id="L433"><a href="#L433">433</a></th><td class="line-code"><pre>++	struct hlist_node* n;
</pre></td></tr>


<tr><th class="line-num" id="L434"><a href="#L434">434</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L435"><a href="#L435">435</a></th><td class="line-code"><pre>++	hlist_for_each_entry_safe(tpos, pos, n, head, node)
</pre></td></tr>


<tr><th class="line-num" id="L436"><a href="#L436">436</a></th><td class="line-code"><pre>++	{
</pre></td></tr>


<tr><th class="line-num" id="L437"><a href="#L437">437</a></th><td class="line-code"><pre>++		if (tpos-&gt;data.ip == ip)
</pre></td></tr>


<tr><th class="line-num" id="L438"><a href="#L438">438</a></th><td class="line-code"><pre>++		{
</pre></td></tr>


<tr><th class="line-num" id="L439"><a href="#L439">439</a></th><td class="line-code"><pre>++			result = tpos;
</pre></td></tr>


<tr><th class="line-num" id="L440"><a href="#L440">440</a></th><td class="line-code"><pre>++			break;
</pre></td></tr>


<tr><th class="line-num" id="L441"><a href="#L441">441</a></th><td class="line-code"><pre>++		}
</pre></td></tr>


<tr><th class="line-num" id="L442"><a href="#L442">442</a></th><td class="line-code"><pre>++	}
</pre></td></tr>


<tr><th class="line-num" id="L443"><a href="#L443">443</a></th><td class="line-code"><pre>++	return result;
</pre></td></tr>


<tr><th class="line-num" id="L444"><a href="#L444">444</a></th><td class="line-code"><pre>++}
</pre></td></tr>


<tr><th class="line-num" id="L445"><a href="#L445">445</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L446"><a href="#L446">446</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L447"><a href="#L447">447</a></th><td class="line-code"><pre>++static void clear_ip_nat(struct hlist_head* head, uint32_t ip)
</pre></td></tr>


<tr><th class="line-num" id="L448"><a href="#L448">448</a></th><td class="line-code"><pre>++{
</pre></td></tr>


<tr><th class="line-num" id="L449"><a href="#L449">449</a></th><td class="line-code"><pre>++	struct mac2ip* tpos;
</pre></td></tr>


<tr><th class="line-num" id="L450"><a href="#L450">450</a></th><td class="line-code"><pre>++	struct hlist_node* pos;
</pre></td></tr>


<tr><th class="line-num" id="L451"><a href="#L451">451</a></th><td class="line-code"><pre>++	struct hlist_node* n;
</pre></td></tr>


<tr><th class="line-num" id="L452"><a href="#L452">452</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L453"><a href="#L453">453</a></th><td class="line-code"><pre>++	hlist_for_each_entry_safe(tpos, pos, n, head, node)
</pre></td></tr>


<tr><th class="line-num" id="L454"><a href="#L454">454</a></th><td class="line-code"><pre>++	{
</pre></td></tr>


<tr><th class="line-num" id="L455"><a href="#L455">455</a></th><td class="line-code"><pre>++		if (tpos-&gt;data.ip == ip)
</pre></td></tr>


<tr><th class="line-num" id="L456"><a href="#L456">456</a></th><td class="line-code"><pre>++		{
</pre></td></tr>


<tr><th class="line-num" id="L457"><a href="#L457">457</a></th><td class="line-code"><pre>++			hlist_del(pos);
</pre></td></tr>


<tr><th class="line-num" id="L458"><a href="#L458">458</a></th><td class="line-code"><pre>++	   		kfree(tpos);
</pre></td></tr>


<tr><th class="line-num" id="L459"><a href="#L459">459</a></th><td class="line-code"><pre>++		}
</pre></td></tr>


<tr><th class="line-num" id="L460"><a href="#L460">460</a></th><td class="line-code"><pre>++	}
</pre></td></tr>


<tr><th class="line-num" id="L461"><a href="#L461">461</a></th><td class="line-code"><pre>++}
</pre></td></tr>


<tr><th class="line-num" id="L462"><a href="#L462">462</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L463"><a href="#L463">463</a></th><td class="line-code"><pre>++static void free_arp_nat(struct hlist_head* head)
</pre></td></tr>


<tr><th class="line-num" id="L464"><a href="#L464">464</a></th><td class="line-code"><pre>++{
</pre></td></tr>


<tr><th class="line-num" id="L465"><a href="#L465">465</a></th><td class="line-code"><pre>++	struct mac2ip* tpos;
</pre></td></tr>


<tr><th class="line-num" id="L466"><a href="#L466">466</a></th><td class="line-code"><pre>++	struct hlist_node* pos;
</pre></td></tr>


<tr><th class="line-num" id="L467"><a href="#L467">467</a></th><td class="line-code"><pre>++	struct hlist_node* n;
</pre></td></tr>


<tr><th class="line-num" id="L468"><a href="#L468">468</a></th><td class="line-code"><pre>++	hlist_for_each_entry_safe(tpos, pos, n, head, node)
</pre></td></tr>


<tr><th class="line-num" id="L469"><a href="#L469">469</a></th><td class="line-code"><pre>++	{
</pre></td></tr>


<tr><th class="line-num" id="L470"><a href="#L470">470</a></th><td class="line-code"><pre>++		hlist_del(pos);
</pre></td></tr>


<tr><th class="line-num" id="L471"><a href="#L471">471</a></th><td class="line-code"><pre>++		kfree(tpos);
</pre></td></tr>


<tr><th class="line-num" id="L472"><a href="#L472">472</a></th><td class="line-code"><pre>++	}
</pre></td></tr>


<tr><th class="line-num" id="L473"><a href="#L473">473</a></th><td class="line-code"><pre>++}
</pre></td></tr>


<tr><th class="line-num" id="L474"><a href="#L474">474</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L475"><a href="#L475">475</a></th><td class="line-code"><pre>++static struct mac2ip* update_arp_nat(struct hlist_head* head, const uint8_t* mac, uint32_t ip)
</pre></td></tr>


<tr><th class="line-num" id="L476"><a href="#L476">476</a></th><td class="line-code"><pre>++{
</pre></td></tr>


<tr><th class="line-num" id="L477"><a href="#L477">477</a></th><td class="line-code"><pre>++	struct mac2ip* entry;
</pre></td></tr>


<tr><th class="line-num" id="L478"><a href="#L478">478</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L479"><a href="#L479">479</a></th><td class="line-code"><pre>++	entry = find_mac_nat(head, mac);
</pre></td></tr>


<tr><th class="line-num" id="L480"><a href="#L480">480</a></th><td class="line-code"><pre>++	if (!entry)
</pre></td></tr>


<tr><th class="line-num" id="L481"><a href="#L481">481</a></th><td class="line-code"><pre>++	{
</pre></td></tr>


<tr><th class="line-num" id="L482"><a href="#L482">482</a></th><td class="line-code"><pre>++		clear_ip_nat(head, ip); /* if entries with new ip exist, wipe them */ 
</pre></td></tr>


<tr><th class="line-num" id="L483"><a href="#L483">483</a></th><td class="line-code"><pre>++		entry = kmalloc(sizeof(*entry), GFP_ATOMIC);
</pre></td></tr>


<tr><th class="line-num" id="L484"><a href="#L484">484</a></th><td class="line-code"><pre>++		if (!entry)
</pre></td></tr>


<tr><th class="line-num" id="L485"><a href="#L485">485</a></th><td class="line-code"><pre>++		{
</pre></td></tr>


<tr><th class="line-num" id="L486"><a href="#L486">486</a></th><td class="line-code"><pre>++			return NULL;
</pre></td></tr>


<tr><th class="line-num" id="L487"><a href="#L487">487</a></th><td class="line-code"><pre>++		}
</pre></td></tr>


<tr><th class="line-num" id="L488"><a href="#L488">488</a></th><td class="line-code"><pre>++		INIT_HLIST_NODE(&amp;entry-&gt;node);
</pre></td></tr>


<tr><th class="line-num" id="L489"><a href="#L489">489</a></th><td class="line-code"><pre>++		hlist_add_head(&amp;entry-&gt;node, head);
</pre></td></tr>


<tr><th class="line-num" id="L490"><a href="#L490">490</a></th><td class="line-code"><pre>++		memcpy(entry-&gt;data.mac, mac, ETH_ALEN);
</pre></td></tr>


<tr><th class="line-num" id="L491"><a href="#L491">491</a></th><td class="line-code"><pre>++		entry-&gt;data.ip = ip;
</pre></td></tr>


<tr><th class="line-num" id="L492"><a href="#L492">492</a></th><td class="line-code"><pre>++	}
</pre></td></tr>


<tr><th class="line-num" id="L493"><a href="#L493">493</a></th><td class="line-code"><pre>++	else if(entry-&gt;data.ip != ip)
</pre></td></tr>


<tr><th class="line-num" id="L494"><a href="#L494">494</a></th><td class="line-code"><pre>++	{
</pre></td></tr>


<tr><th class="line-num" id="L495"><a href="#L495">495</a></th><td class="line-code"><pre>++		clear_ip_nat(head, ip); /* if entries with new ip exist, wipe them */ 
</pre></td></tr>


<tr><th class="line-num" id="L496"><a href="#L496">496</a></th><td class="line-code"><pre>++		entry-&gt;data.ip = ip;
</pre></td></tr>


<tr><th class="line-num" id="L497"><a href="#L497">497</a></th><td class="line-code"><pre>++	}
</pre></td></tr>


<tr><th class="line-num" id="L498"><a href="#L498">498</a></th><td class="line-code"><pre>++	return entry;
</pre></td></tr>


<tr><th class="line-num" id="L499"><a href="#L499">499</a></th><td class="line-code"><pre>++}
</pre></td></tr>


<tr><th class="line-num" id="L500"><a href="#L500">500</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L501"><a href="#L501">501</a></th><td class="line-code"><pre>++#ifdef CONFIG_PROC_FS
</pre></td></tr>


<tr><th class="line-num" id="L502"><a href="#L502">502</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L503"><a href="#L503">503</a></th><td class="line-code"><pre>++static void *arpnat_start(struct seq_file *seq, loff_t *loff_pos)
</pre></td></tr>


<tr><th class="line-num" id="L504"><a href="#L504">504</a></th><td class="line-code"><pre>++{
</pre></td></tr>


<tr><th class="line-num" id="L505"><a href="#L505">505</a></th><td class="line-code"><pre>++	static unsigned long counter = 0;
</pre></td></tr>


<tr><th class="line-num" id="L506"><a href="#L506">506</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L507"><a href="#L507">507</a></th><td class="line-code"><pre>++	/* beginning a new sequence ? */	
</pre></td></tr>


<tr><th class="line-num" id="L508"><a href="#L508">508</a></th><td class="line-code"><pre>++	if ( *loff_pos == 0 )
</pre></td></tr>


<tr><th class="line-num" id="L509"><a href="#L509">509</a></th><td class="line-code"><pre>++	{	
</pre></td></tr>


<tr><th class="line-num" id="L510"><a href="#L510">510</a></th><td class="line-code"><pre>++		/* yes =&gt; return a non null value to begin the sequence */
</pre></td></tr>


<tr><th class="line-num" id="L511"><a href="#L511">511</a></th><td class="line-code"><pre>++		return &amp;counter;
</pre></td></tr>


<tr><th class="line-num" id="L512"><a href="#L512">512</a></th><td class="line-code"><pre>++	}
</pre></td></tr>


<tr><th class="line-num" id="L513"><a href="#L513">513</a></th><td class="line-code"><pre>++	else
</pre></td></tr>


<tr><th class="line-num" id="L514"><a href="#L514">514</a></th><td class="line-code"><pre>++	{
</pre></td></tr>


<tr><th class="line-num" id="L515"><a href="#L515">515</a></th><td class="line-code"><pre>++		/* no =&gt; it's the end of the sequence, return end to stop reading */
</pre></td></tr>


<tr><th class="line-num" id="L516"><a href="#L516">516</a></th><td class="line-code"><pre>++		*loff_pos = 0;
</pre></td></tr>


<tr><th class="line-num" id="L517"><a href="#L517">517</a></th><td class="line-code"><pre>++		return NULL;
</pre></td></tr>


<tr><th class="line-num" id="L518"><a href="#L518">518</a></th><td class="line-code"><pre>++	}
</pre></td></tr>


<tr><th class="line-num" id="L519"><a href="#L519">519</a></th><td class="line-code"><pre>++}
</pre></td></tr>


<tr><th class="line-num" id="L520"><a href="#L520">520</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L521"><a href="#L521">521</a></th><td class="line-code"><pre>++static void *arpnat_next(struct seq_file *seq, void *v, loff_t *pos)
</pre></td></tr>


<tr><th class="line-num" id="L522"><a href="#L522">522</a></th><td class="line-code"><pre>++{
</pre></td></tr>


<tr><th class="line-num" id="L523"><a href="#L523">523</a></th><td class="line-code"><pre>++	return NULL;
</pre></td></tr>


<tr><th class="line-num" id="L524"><a href="#L524">524</a></th><td class="line-code"><pre>++}
</pre></td></tr>


<tr><th class="line-num" id="L525"><a href="#L525">525</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L526"><a href="#L526">526</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L527"><a href="#L527">527</a></th><td class="line-code"><pre>++static void arpnat_stop(struct seq_file *seq, void *v)
</pre></td></tr>


<tr><th class="line-num" id="L528"><a href="#L528">528</a></th><td class="line-code"><pre>++{
</pre></td></tr>


<tr><th class="line-num" id="L529"><a href="#L529">529</a></th><td class="line-code"><pre>++	//don't need to do anything
</pre></td></tr>


<tr><th class="line-num" id="L530"><a href="#L530">530</a></th><td class="line-code"><pre>++}
</pre></td></tr>


<tr><th class="line-num" id="L531"><a href="#L531">531</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L532"><a href="#L532">532</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L533"><a href="#L533">533</a></th><td class="line-code"><pre>++static int arpnat_cache_show(struct seq_file *s, void *v)
</pre></td></tr>


<tr><th class="line-num" id="L534"><a href="#L534">534</a></th><td class="line-code"><pre>++{
</pre></td></tr>


<tr><th class="line-num" id="L535"><a href="#L535">535</a></th><td class="line-code"><pre>++	struct mac2ip* tpos;
</pre></td></tr>


<tr><th class="line-num" id="L536"><a href="#L536">536</a></th><td class="line-code"><pre>++	struct hlist_node* pos;
</pre></td></tr>


<tr><th class="line-num" id="L537"><a href="#L537">537</a></th><td class="line-code"><pre>++	struct hlist_node* n;
</pre></td></tr>


<tr><th class="line-num" id="L538"><a href="#L538">538</a></th><td class="line-code"><pre>++	unsigned long flags;
</pre></td></tr>


<tr><th class="line-num" id="L539"><a href="#L539">539</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L540"><a href="#L540">540</a></th><td class="line-code"><pre>++	spin_lock_irqsave(&amp;arpnat_lock, flags);
</pre></td></tr>


<tr><th class="line-num" id="L541"><a href="#L541">541</a></th><td class="line-code"><pre>++	hlist_for_each_entry_safe(tpos, pos, n, &amp;arpnat_table, node)
</pre></td></tr>


<tr><th class="line-num" id="L542"><a href="#L542">542</a></th><td class="line-code"><pre>++	{
</pre></td></tr>


<tr><th class="line-num" id="L543"><a href="#L543">543</a></th><td class="line-code"><pre>++		seq_printf(s, STRMAC&quot;\t&quot;STRIP&quot;\n&quot;, MAC2STR(tpos-&gt;data.mac), IP2STR(tpos-&gt;data.ip));
</pre></td></tr>


<tr><th class="line-num" id="L544"><a href="#L544">544</a></th><td class="line-code"><pre>++	}
</pre></td></tr>


<tr><th class="line-num" id="L545"><a href="#L545">545</a></th><td class="line-code"><pre>++	spin_unlock_irqrestore(&amp;arpnat_lock, flags);
</pre></td></tr>


<tr><th class="line-num" id="L546"><a href="#L546">546</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L547"><a href="#L547">547</a></th><td class="line-code"><pre>++	return 0;
</pre></td></tr>


<tr><th class="line-num" id="L548"><a href="#L548">548</a></th><td class="line-code"><pre>++}
</pre></td></tr>


<tr><th class="line-num" id="L549"><a href="#L549">549</a></th><td class="line-code"><pre>++static int arpnat_info_show(struct seq_file *s, void *v)
</pre></td></tr>


<tr><th class="line-num" id="L550"><a href="#L550">550</a></th><td class="line-code"><pre>++{
</pre></td></tr>


<tr><th class="line-num" id="L551"><a href="#L551">551</a></th><td class="line-code"><pre>++	seq_printf(s, &quot;Debug: %d\nBOOTPNAT: %d\n&quot;, debug, bootpnat);
</pre></td></tr>


<tr><th class="line-num" id="L552"><a href="#L552">552</a></th><td class="line-code"><pre>++	return 0;
</pre></td></tr>


<tr><th class="line-num" id="L553"><a href="#L553">553</a></th><td class="line-code"><pre>++}
</pre></td></tr>


<tr><th class="line-num" id="L554"><a href="#L554">554</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L555"><a href="#L555">555</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L556"><a href="#L556">556</a></th><td class="line-code"><pre>++static struct seq_operations arpnat_cache_sops = {
</pre></td></tr>


<tr><th class="line-num" id="L557"><a href="#L557">557</a></th><td class="line-code"><pre>++	.start = arpnat_start,
</pre></td></tr>


<tr><th class="line-num" id="L558"><a href="#L558">558</a></th><td class="line-code"><pre>++	.next  = arpnat_next,
</pre></td></tr>


<tr><th class="line-num" id="L559"><a href="#L559">559</a></th><td class="line-code"><pre>++	.stop  = arpnat_stop,
</pre></td></tr>


<tr><th class="line-num" id="L560"><a href="#L560">560</a></th><td class="line-code"><pre>++	.show  = arpnat_cache_show
</pre></td></tr>


<tr><th class="line-num" id="L561"><a href="#L561">561</a></th><td class="line-code"><pre>++};
</pre></td></tr>


<tr><th class="line-num" id="L562"><a href="#L562">562</a></th><td class="line-code"><pre>++static struct seq_operations arpnat_info_sops = {
</pre></td></tr>


<tr><th class="line-num" id="L563"><a href="#L563">563</a></th><td class="line-code"><pre>++	.start = arpnat_start,
</pre></td></tr>


<tr><th class="line-num" id="L564"><a href="#L564">564</a></th><td class="line-code"><pre>++	.next  = arpnat_next,
</pre></td></tr>


<tr><th class="line-num" id="L565"><a href="#L565">565</a></th><td class="line-code"><pre>++	.stop  = arpnat_stop,
</pre></td></tr>


<tr><th class="line-num" id="L566"><a href="#L566">566</a></th><td class="line-code"><pre>++	.show  = arpnat_info_show
</pre></td></tr>


<tr><th class="line-num" id="L567"><a href="#L567">567</a></th><td class="line-code"><pre>++};
</pre></td></tr>


<tr><th class="line-num" id="L568"><a href="#L568">568</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L569"><a href="#L569">569</a></th><td class="line-code"><pre>++static int arpnat_cache_open(struct inode *inode, struct file* file)
</pre></td></tr>


<tr><th class="line-num" id="L570"><a href="#L570">570</a></th><td class="line-code"><pre>++{
</pre></td></tr>


<tr><th class="line-num" id="L571"><a href="#L571">571</a></th><td class="line-code"><pre>++	return seq_open(file, &amp;arpnat_cache_sops);
</pre></td></tr>


<tr><th class="line-num" id="L572"><a href="#L572">572</a></th><td class="line-code"><pre>++}
</pre></td></tr>


<tr><th class="line-num" id="L573"><a href="#L573">573</a></th><td class="line-code"><pre>++static int arpnat_info_open(struct inode *inode, struct file* file)
</pre></td></tr>


<tr><th class="line-num" id="L574"><a href="#L574">574</a></th><td class="line-code"><pre>++{
</pre></td></tr>


<tr><th class="line-num" id="L575"><a href="#L575">575</a></th><td class="line-code"><pre>++	return seq_open(file, &amp;arpnat_info_sops);
</pre></td></tr>


<tr><th class="line-num" id="L576"><a href="#L576">576</a></th><td class="line-code"><pre>++}
</pre></td></tr>


<tr><th class="line-num" id="L577"><a href="#L577">577</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L578"><a href="#L578">578</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L579"><a href="#L579">579</a></th><td class="line-code"><pre>++static struct file_operations arpnat_cache_fops = {
</pre></td></tr>


<tr><th class="line-num" id="L580"><a href="#L580">580</a></th><td class="line-code"><pre>++	.owner   = THIS_MODULE,
</pre></td></tr>


<tr><th class="line-num" id="L581"><a href="#L581">581</a></th><td class="line-code"><pre>++	.open    = arpnat_cache_open,
</pre></td></tr>


<tr><th class="line-num" id="L582"><a href="#L582">582</a></th><td class="line-code"><pre>++	.read    = seq_read,
</pre></td></tr>


<tr><th class="line-num" id="L583"><a href="#L583">583</a></th><td class="line-code"><pre>++	.llseek  = seq_lseek,
</pre></td></tr>


<tr><th class="line-num" id="L584"><a href="#L584">584</a></th><td class="line-code"><pre>++	.release = seq_release
</pre></td></tr>


<tr><th class="line-num" id="L585"><a href="#L585">585</a></th><td class="line-code"><pre>++};
</pre></td></tr>


<tr><th class="line-num" id="L586"><a href="#L586">586</a></th><td class="line-code"><pre>++static struct file_operations arpnat_info_fops = {
</pre></td></tr>


<tr><th class="line-num" id="L587"><a href="#L587">587</a></th><td class="line-code"><pre>++	.owner   = THIS_MODULE,
</pre></td></tr>


<tr><th class="line-num" id="L588"><a href="#L588">588</a></th><td class="line-code"><pre>++	.open    = arpnat_info_open,
</pre></td></tr>


<tr><th class="line-num" id="L589"><a href="#L589">589</a></th><td class="line-code"><pre>++	.read    = seq_read,
</pre></td></tr>


<tr><th class="line-num" id="L590"><a href="#L590">590</a></th><td class="line-code"><pre>++	.llseek  = seq_lseek,
</pre></td></tr>


<tr><th class="line-num" id="L591"><a href="#L591">591</a></th><td class="line-code"><pre>++	.release = seq_release
</pre></td></tr>


<tr><th class="line-num" id="L592"><a href="#L592">592</a></th><td class="line-code"><pre>++};
</pre></td></tr>


<tr><th class="line-num" id="L593"><a href="#L593">593</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L594"><a href="#L594">594</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L595"><a href="#L595">595</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L596"><a href="#L596">596</a></th><td class="line-code"><pre>++#endif
</pre></td></tr>


<tr><th class="line-num" id="L597"><a href="#L597">597</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L598"><a href="#L598">598</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L599"><a href="#L599">599</a></th><td class="line-code"><pre>++static unsigned int ebt_target_arpnat(struct sk_buff *pskb, const struct xt_action_param *par)
</pre></td></tr>


<tr><th class="line-num" id="L600"><a href="#L600">600</a></th><td class="line-code"><pre>++{
</pre></td></tr>


<tr><th class="line-num" id="L601"><a href="#L601">601</a></th><td class="line-code"><pre>++	const struct net_device *in  =  par-&gt;in;
</pre></td></tr>


<tr><th class="line-num" id="L602"><a href="#L602">602</a></th><td class="line-code"><pre>++	const struct net_device *out =  par-&gt;out;
</pre></td></tr>


<tr><th class="line-num" id="L603"><a href="#L603">603</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L604"><a href="#L604">604</a></th><td class="line-code"><pre>++	const struct ebt_nat_info *info = (struct ebt_nat_info *) par-&gt;targinfo;
</pre></td></tr>


<tr><th class="line-num" id="L605"><a href="#L605">605</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L606"><a href="#L606">606</a></th><td class="line-code"><pre>++	struct arphdr *ah = NULL;
</pre></td></tr>


<tr><th class="line-num" id="L607"><a href="#L607">607</a></th><td class="line-code"><pre>++	struct arphdr _arph;
</pre></td></tr>


<tr><th class="line-num" id="L608"><a href="#L608">608</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L609"><a href="#L609">609</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L610"><a href="#L610">610</a></th><td class="line-code"><pre>++	//used for target only
</pre></td></tr>


<tr><th class="line-num" id="L611"><a href="#L611">611</a></th><td class="line-code"><pre>++	uint8_t* eth_smac = eth_hdr(pskb)-&gt;h_source;
</pre></td></tr>


<tr><th class="line-num" id="L612"><a href="#L612">612</a></th><td class="line-code"><pre>++	uint8_t* eth_dmac = eth_hdr(pskb)-&gt;h_dest;
</pre></td></tr>


<tr><th class="line-num" id="L613"><a href="#L613">613</a></th><td class="line-code"><pre>++	uint32_t* arp_sip = NULL;
</pre></td></tr>


<tr><th class="line-num" id="L614"><a href="#L614">614</a></th><td class="line-code"><pre>++	uint8_t* arp_smac = NULL;
</pre></td></tr>


<tr><th class="line-num" id="L615"><a href="#L615">615</a></th><td class="line-code"><pre>++	uint32_t* arp_dip = NULL;
</pre></td></tr>


<tr><th class="line-num" id="L616"><a href="#L616">616</a></th><td class="line-code"><pre>++	uint8_t* arp_dmac = NULL;
</pre></td></tr>


<tr><th class="line-num" id="L617"><a href="#L617">617</a></th><td class="line-code"><pre>++	struct mac2ip* entry = NULL;
</pre></td></tr>


<tr><th class="line-num" id="L618"><a href="#L618">618</a></th><td class="line-code"><pre>++	unsigned long flags;
</pre></td></tr>


<tr><th class="line-num" id="L619"><a href="#L619">619</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L620"><a href="#L620">620</a></th><td class="line-code"><pre>++	/* if it's an arp packet, initialize pointers to arp source/dest ip/mac addresses in skb */
</pre></td></tr>


<tr><th class="line-num" id="L621"><a href="#L621">621</a></th><td class="line-code"><pre>++	if (eth_hdr(pskb)-&gt;h_proto == __constant_htons(ETH_P_ARP))
</pre></td></tr>


<tr><th class="line-num" id="L622"><a href="#L622">622</a></th><td class="line-code"><pre>++	{
</pre></td></tr>


<tr><th class="line-num" id="L623"><a href="#L623">623</a></th><td class="line-code"><pre>++		if(debug)
</pre></td></tr>


<tr><th class="line-num" id="L624"><a href="#L624">624</a></th><td class="line-code"><pre>++		{
</pre></td></tr>


<tr><th class="line-num" id="L625"><a href="#L625">625</a></th><td class="line-code"><pre>++			printk(&quot;ARPNAT ARP DETECTED\n&quot;);
</pre></td></tr>


<tr><th class="line-num" id="L626"><a href="#L626">626</a></th><td class="line-code"><pre>++		}
</pre></td></tr>


<tr><th class="line-num" id="L627"><a href="#L627">627</a></th><td class="line-code"><pre>++		ah = skb_header_pointer(pskb, 0, sizeof(_arph), &amp;_arph);
</pre></td></tr>


<tr><th class="line-num" id="L628"><a href="#L628">628</a></th><td class="line-code"><pre>++		if (ah-&gt;ar_hln == ETH_ALEN &amp;&amp; ah-&gt;ar_pro == htons(ETH_P_IP) &amp;&amp; ah-&gt;ar_pln == 4)
</pre></td></tr>


<tr><th class="line-num" id="L629"><a href="#L629">629</a></th><td class="line-code"><pre>++		{
</pre></td></tr>


<tr><th class="line-num" id="L630"><a href="#L630">630</a></th><td class="line-code"><pre>++			unsigned char *raw = skb_network_header(pskb);
</pre></td></tr>


<tr><th class="line-num" id="L631"><a href="#L631">631</a></th><td class="line-code"><pre>++			arp_sip = (uint32_t*)(raw + sizeof(struct arphdr) + (arp_hdr(pskb)-&gt;ar_hln));
</pre></td></tr>


<tr><th class="line-num" id="L632"><a href="#L632">632</a></th><td class="line-code"><pre>++			arp_smac = raw + sizeof(struct arphdr);
</pre></td></tr>


<tr><th class="line-num" id="L633"><a href="#L633">633</a></th><td class="line-code"><pre>++			arp_dip = (uint32_t*)(raw + sizeof(struct arphdr) + (2*(arp_hdr(pskb)-&gt;ar_hln)) + arp_hdr(pskb)-&gt;ar_pln);
</pre></td></tr>


<tr><th class="line-num" id="L634"><a href="#L634">634</a></th><td class="line-code"><pre>++			arp_dmac = raw + sizeof(struct arphdr) + arp_hdr(pskb)-&gt;ar_hln + arp_hdr(pskb)-&gt;ar_pln;
</pre></td></tr>


<tr><th class="line-num" id="L635"><a href="#L635">635</a></th><td class="line-code"><pre>++		}
</pre></td></tr>


<tr><th class="line-num" id="L636"><a href="#L636">636</a></th><td class="line-code"><pre>++		else
</pre></td></tr>


<tr><th class="line-num" id="L637"><a href="#L637">637</a></th><td class="line-code"><pre>++		{
</pre></td></tr>


<tr><th class="line-num" id="L638"><a href="#L638">638</a></th><td class="line-code"><pre>++			ah = NULL;
</pre></td></tr>


<tr><th class="line-num" id="L639"><a href="#L639">639</a></th><td class="line-code"><pre>++		}
</pre></td></tr>


<tr><th class="line-num" id="L640"><a href="#L640">640</a></th><td class="line-code"><pre>++	}
</pre></td></tr>


<tr><th class="line-num" id="L641"><a href="#L641">641</a></th><td class="line-code"><pre>++	
</pre></td></tr>


<tr><th class="line-num" id="L642"><a href="#L642">642</a></th><td class="line-code"><pre>++	if (in)
</pre></td></tr>


<tr><th class="line-num" id="L643"><a href="#L643">643</a></th><td class="line-code"><pre>++	{
</pre></td></tr>


<tr><th class="line-num" id="L644"><a href="#L644">644</a></th><td class="line-code"><pre>++		struct net_bridge_port *in_br_port;
</pre></td></tr>


<tr><th class="line-num" id="L645"><a href="#L645">645</a></th><td class="line-code"><pre>++		in_br_port = br_port_get_rcu(in);
</pre></td></tr>


<tr><th class="line-num" id="L646"><a href="#L646">646</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L647"><a href="#L647">647</a></th><td class="line-code"><pre>++		/* handle input packets */
</pre></td></tr>


<tr><th class="line-num" id="L648"><a href="#L648">648</a></th><td class="line-code"><pre>++		if(debug)
</pre></td></tr>


<tr><th class="line-num" id="L649"><a href="#L649">649</a></th><td class="line-code"><pre>++		{
</pre></td></tr>


<tr><th class="line-num" id="L650"><a href="#L650">650</a></th><td class="line-code"><pre>++			printk(&quot;ARPNAT INBOUND DETECTED\n&quot;);
</pre></td></tr>


<tr><th class="line-num" id="L651"><a href="#L651">651</a></th><td class="line-code"><pre>++		}
</pre></td></tr>


<tr><th class="line-num" id="L652"><a href="#L652">652</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L653"><a href="#L653">653</a></th><td class="line-code"><pre>++		if (ah)
</pre></td></tr>


<tr><th class="line-num" id="L654"><a href="#L654">654</a></th><td class="line-code"><pre>++		{
</pre></td></tr>


<tr><th class="line-num" id="L655"><a href="#L655">655</a></th><td class="line-code"><pre>++			if(debug)
</pre></td></tr>


<tr><th class="line-num" id="L656"><a href="#L656">656</a></th><td class="line-code"><pre>++			{
</pre></td></tr>


<tr><th class="line-num" id="L657"><a href="#L657">657</a></th><td class="line-code"><pre>++				printk(&quot;IN ARPNAT:\n&quot;);
</pre></td></tr>


<tr><th class="line-num" id="L658"><a href="#L658">658</a></th><td class="line-code"><pre>++				printk(&quot;          arp_smac=&quot;STRMAC&quot;, arp_dmac=&quot;STRMAC&quot;\n&quot;, MAC2STR(arp_smac), MAC2STR(arp_dmac));
</pre></td></tr>


<tr><th class="line-num" id="L659"><a href="#L659">659</a></th><td class="line-code"><pre>++				printk(&quot;          arp_sip =&quot;STRIP&quot;, arp_dip =&quot;STRIP&quot;\n&quot;, IP2STR(*arp_sip), IP2STR(*arp_dip));
</pre></td></tr>


<tr><th class="line-num" id="L660"><a href="#L660">660</a></th><td class="line-code"><pre>++				if(ah-&gt;ar_op == __constant_htons(ARPOP_REPLY))
</pre></td></tr>


<tr><th class="line-num" id="L661"><a href="#L661">661</a></th><td class="line-code"><pre>++				{
</pre></td></tr>


<tr><th class="line-num" id="L662"><a href="#L662">662</a></th><td class="line-code"><pre>++					printk(&quot;          arp_op=reply\n&quot;);
</pre></td></tr>


<tr><th class="line-num" id="L663"><a href="#L663">663</a></th><td class="line-code"><pre>++				}
</pre></td></tr>


<tr><th class="line-num" id="L664"><a href="#L664">664</a></th><td class="line-code"><pre>++				else if(ah-&gt;ar_op == __constant_htons(ARPOP_REQUEST))
</pre></td></tr>


<tr><th class="line-num" id="L665"><a href="#L665">665</a></th><td class="line-code"><pre>++				{
</pre></td></tr>


<tr><th class="line-num" id="L666"><a href="#L666">666</a></th><td class="line-code"><pre>++					printk(&quot;          arp_op=request\n&quot;);
</pre></td></tr>


<tr><th class="line-num" id="L667"><a href="#L667">667</a></th><td class="line-code"><pre>++				}
</pre></td></tr>


<tr><th class="line-num" id="L668"><a href="#L668">668</a></th><td class="line-code"><pre>++				else
</pre></td></tr>


<tr><th class="line-num" id="L669"><a href="#L669">669</a></th><td class="line-code"><pre>++				{
</pre></td></tr>


<tr><th class="line-num" id="L670"><a href="#L670">670</a></th><td class="line-code"><pre>++					printk(&quot;          arp_op=%d\n&quot;, ntohs(ah-&gt;ar_op));
</pre></td></tr>


<tr><th class="line-num" id="L671"><a href="#L671">671</a></th><td class="line-code"><pre>++				}
</pre></td></tr>


<tr><th class="line-num" id="L672"><a href="#L672">672</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L673"><a href="#L673">673</a></th><td class="line-code"><pre>++			}
</pre></td></tr>


<tr><th class="line-num" id="L674"><a href="#L674">674</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L675"><a href="#L675">675</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L676"><a href="#L676">676</a></th><td class="line-code"><pre>++			if (inet_confirm_addr( __in_dev_get_rcu(in_br_port-&gt;br-&gt;dev) , 0, *arp_dip, RT_SCOPE_HOST))
</pre></td></tr>


<tr><th class="line-num" id="L677"><a href="#L677">677</a></th><td class="line-code"><pre>++			{
</pre></td></tr>


<tr><th class="line-num" id="L678"><a href="#L678">678</a></th><td class="line-code"><pre>++				if (debug)
</pre></td></tr>


<tr><th class="line-num" id="L679"><a href="#L679">679</a></th><td class="line-code"><pre>++				{
</pre></td></tr>


<tr><th class="line-num" id="L680"><a href="#L680">680</a></th><td class="line-code"><pre>++					printk(&quot;          TO US\n&quot;);
</pre></td></tr>


<tr><th class="line-num" id="L681"><a href="#L681">681</a></th><td class="line-code"><pre>++				}
</pre></td></tr>


<tr><th class="line-num" id="L682"><a href="#L682">682</a></th><td class="line-code"><pre>++				return info-&gt;target;
</pre></td></tr>


<tr><th class="line-num" id="L683"><a href="#L683">683</a></th><td class="line-code"><pre>++			}
</pre></td></tr>


<tr><th class="line-num" id="L684"><a href="#L684">684</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L685"><a href="#L685">685</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L686"><a href="#L686">686</a></th><td class="line-code"><pre>++			spin_lock_irqsave(&amp;arpnat_lock, flags);
</pre></td></tr>


<tr><th class="line-num" id="L687"><a href="#L687">687</a></th><td class="line-code"><pre>++			entry = find_ip_nat(&amp;arpnat_table, *arp_dip);
</pre></td></tr>


<tr><th class="line-num" id="L688"><a href="#L688">688</a></th><td class="line-code"><pre>++			switch (ah-&gt;ar_op)
</pre></td></tr>


<tr><th class="line-num" id="L689"><a href="#L689">689</a></th><td class="line-code"><pre>++			{
</pre></td></tr>


<tr><th class="line-num" id="L690"><a href="#L690">690</a></th><td class="line-code"><pre>++				case __constant_htons(ARPOP_REPLY):
</pre></td></tr>


<tr><th class="line-num" id="L691"><a href="#L691">691</a></th><td class="line-code"><pre>++	 			case __constant_htons(ARPOP_REQUEST):
</pre></td></tr>


<tr><th class="line-num" id="L692"><a href="#L692">692</a></th><td class="line-code"><pre>++				if (entry)
</pre></td></tr>


<tr><th class="line-num" id="L693"><a href="#L693">693</a></th><td class="line-code"><pre>++				{
</pre></td></tr>


<tr><th class="line-num" id="L694"><a href="#L694">694</a></th><td class="line-code"><pre>++					uint32_t dip = *arp_dip;
</pre></td></tr>


<tr><th class="line-num" id="L695"><a href="#L695">695</a></th><td class="line-code"><pre>++					uint32_t sip = inet_select_addr(in_br_port-&gt;br-&gt;dev, dip, RT_SCOPE_LINK);
</pre></td></tr>


<tr><th class="line-num" id="L696"><a href="#L696">696</a></th><td class="line-code"><pre>++					if (! (eth_dmac[0] &amp; 1))
</pre></td></tr>


<tr><th class="line-num" id="L697"><a href="#L697">697</a></th><td class="line-code"><pre>++					{
</pre></td></tr>


<tr><th class="line-num" id="L698"><a href="#L698">698</a></th><td class="line-code"><pre>++						if (debug)
</pre></td></tr>


<tr><th class="line-num" id="L699"><a href="#L699">699</a></th><td class="line-code"><pre>++						{
</pre></td></tr>


<tr><th class="line-num" id="L700"><a href="#L700">700</a></th><td class="line-code"><pre>++							printk(&quot;          &quot;STRMAC&quot; -&gt; &quot;STRMAC&quot;\n&quot;, MAC2STR(eth_dmac), MAC2STR(entry-&gt;data.mac));
</pre></td></tr>


<tr><th class="line-num" id="L701"><a href="#L701">701</a></th><td class="line-code"><pre>++						}
</pre></td></tr>


<tr><th class="line-num" id="L702"><a href="#L702">702</a></th><td class="line-code"><pre>++						memcpy(arp_dmac, entry-&gt;data.mac, ETH_ALEN);
</pre></td></tr>


<tr><th class="line-num" id="L703"><a href="#L703">703</a></th><td class="line-code"><pre>++						memcpy(eth_dmac, entry-&gt;data.mac, ETH_ALEN);
</pre></td></tr>


<tr><th class="line-num" id="L704"><a href="#L704">704</a></th><td class="line-code"><pre>++						(pskb)-&gt;pkt_type = (dip != sip) ? PACKET_OTHERHOST : (pskb)-&gt;pkt_type;
</pre></td></tr>


<tr><th class="line-num" id="L705"><a href="#L705">705</a></th><td class="line-code"><pre>++					}
</pre></td></tr>


<tr><th class="line-num" id="L706"><a href="#L706">706</a></th><td class="line-code"><pre>++					spin_unlock_irqrestore(&amp;arpnat_lock, flags);
</pre></td></tr>


<tr><th class="line-num" id="L707"><a href="#L707">707</a></th><td class="line-code"><pre>++					/*if (dip != sip)
</pre></td></tr>


<tr><th class="line-num" id="L708"><a href="#L708">708</a></th><td class="line-code"><pre>++					{
</pre></td></tr>


<tr><th class="line-num" id="L709"><a href="#L709">709</a></th><td class="line-code"><pre>++						if (debug)
</pre></td></tr>


<tr><th class="line-num" id="L710"><a href="#L710">710</a></th><td class="line-code"><pre>++							printk(&quot;SEND ARP REQUEST: &quot;STRIP&quot; -&gt; &quot;STRIP&quot;\n&quot;, IP2STR(sip), IP2STR(dip));
</pre></td></tr>


<tr><th class="line-num" id="L711"><a href="#L711">711</a></th><td class="line-code"><pre>++						arp_send(ARPOP_REQUEST, ETH_P_ARP, dip, &amp;in_br_port-&gt;br-&gt;dev, sip, NULL, in_br_port-&gt;br-&gt;dev.dev_addr, NULL);
</pre></td></tr>


<tr><th class="line-num" id="L712"><a href="#L712">712</a></th><td class="line-code"><pre>++					}*/
</pre></td></tr>


<tr><th class="line-num" id="L713"><a href="#L713">713</a></th><td class="line-code"><pre>++					return info-&gt;target;
</pre></td></tr>


<tr><th class="line-num" id="L714"><a href="#L714">714</a></th><td class="line-code"><pre>++				}
</pre></td></tr>


<tr><th class="line-num" id="L715"><a href="#L715">715</a></th><td class="line-code"><pre>++				break;
</pre></td></tr>


<tr><th class="line-num" id="L716"><a href="#L716">716</a></th><td class="line-code"><pre>++			}
</pre></td></tr>


<tr><th class="line-num" id="L717"><a href="#L717">717</a></th><td class="line-code"><pre>++			spin_unlock_irqrestore(&amp;arpnat_lock, flags);
</pre></td></tr>


<tr><th class="line-num" id="L718"><a href="#L718">718</a></th><td class="line-code"><pre>++		}
</pre></td></tr>


<tr><th class="line-num" id="L719"><a href="#L719">719</a></th><td class="line-code"><pre>++		else if (eth_hdr(pskb)-&gt;h_proto == __constant_htons(ETH_P_IP))
</pre></td></tr>


<tr><th class="line-num" id="L720"><a href="#L720">720</a></th><td class="line-code"><pre>++		{
</pre></td></tr>


<tr><th class="line-num" id="L721"><a href="#L721">721</a></th><td class="line-code"><pre>++			struct iphdr *iph = ip_hdr(pskb);
</pre></td></tr>


<tr><th class="line-num" id="L722"><a href="#L722">722</a></th><td class="line-code"><pre>++			struct udphdr *uh = NULL;
</pre></td></tr>


<tr><th class="line-num" id="L723"><a href="#L723">723</a></th><td class="line-code"><pre>++			if (bootpnat &amp;&amp; (unsigned char)iph-&gt;protocol == (unsigned char)IPPROTO_UDP &amp;&amp; !(iph-&gt;frag_off &amp; htons(IP_OFFSET)))
</pre></td></tr>


<tr><th class="line-num" id="L724"><a href="#L724">724</a></th><td class="line-code"><pre>++			{
</pre></td></tr>


<tr><th class="line-num" id="L725"><a href="#L725">725</a></th><td class="line-code"><pre>++				uh = (struct udphdr*)((u_int32_t *)iph + iph-&gt;ihl);
</pre></td></tr>


<tr><th class="line-num" id="L726"><a href="#L726">726</a></th><td class="line-code"><pre>++				if(uh-&gt;dest == htons(67) || uh-&gt;dest == htons(68) )
</pre></td></tr>


<tr><th class="line-num" id="L727"><a href="#L727">727</a></th><td class="line-code"><pre>++				{
</pre></td></tr>


<tr><th class="line-num" id="L728"><a href="#L728">728</a></th><td class="line-code"><pre>++					//do something illegal for BOOTP
</pre></td></tr>


<tr><th class="line-num" id="L729"><a href="#L729">729</a></th><td class="line-code"><pre>++					uint32_t* giaddrp = (uint32_t*)(((uint8_t*)uh) + sizeof(*uh) + GIADDR_OFFSET);
</pre></td></tr>


<tr><th class="line-num" id="L730"><a href="#L730">730</a></th><td class="line-code"><pre>++					uint8_t* mac = (uint8_t*)(giaddrp + 1);
</pre></td></tr>


<tr><th class="line-num" id="L731"><a href="#L731">731</a></th><td class="line-code"><pre>++					uint32_t ihl = iph-&gt;ihl &lt;&lt; 2;
</pre></td></tr>


<tr><th class="line-num" id="L732"><a href="#L732">732</a></th><td class="line-code"><pre>++					uint32_t size = (pskb)-&gt;len - ihl;
</pre></td></tr>


<tr><th class="line-num" id="L733"><a href="#L733">733</a></th><td class="line-code"><pre>++					uint32_t orig_daddr = iph-&gt;daddr;
</pre></td></tr>


<tr><th class="line-num" id="L734"><a href="#L734">734</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L735"><a href="#L735">735</a></th><td class="line-code"><pre>++					iph-&gt;daddr = 0xffffffff;
</pre></td></tr>


<tr><th class="line-num" id="L736"><a href="#L736">736</a></th><td class="line-code"><pre>++					if (debug)
</pre></td></tr>


<tr><th class="line-num" id="L737"><a href="#L737">737</a></th><td class="line-code"><pre>++					{
</pre></td></tr>


<tr><th class="line-num" id="L738"><a href="#L738">738</a></th><td class="line-code"><pre>++						printk(&quot;IN BOOTPRELAY: &quot;STRMAC&quot;[&quot;STRIP&quot;] -&gt; &quot;STRMAC&quot;[&quot;STRIP&quot;]\n&quot;, MAC2STR(eth_dmac), IP2STR(orig_daddr), MAC2STR(mac), IP2STR(iph-&gt;daddr));
</pre></td></tr>


<tr><th class="line-num" id="L739"><a href="#L739">739</a></th><td class="line-code"><pre>++					}
</pre></td></tr>


<tr><th class="line-num" id="L740"><a href="#L740">740</a></th><td class="line-code"><pre>++					memcpy(eth_dmac, mac, ETH_ALEN);
</pre></td></tr>


<tr><th class="line-num" id="L741"><a href="#L741">741</a></th><td class="line-code"><pre>++					*giaddrp = 0;
</pre></td></tr>


<tr><th class="line-num" id="L742"><a href="#L742">742</a></th><td class="line-code"><pre>++					uh-&gt;dest = htons(68);
</pre></td></tr>


<tr><th class="line-num" id="L743"><a href="#L743">743</a></th><td class="line-code"><pre>++					iph-&gt;check = 0;
</pre></td></tr>


<tr><th class="line-num" id="L744"><a href="#L744">744</a></th><td class="line-code"><pre>++					uh-&gt;check = 0;
</pre></td></tr>


<tr><th class="line-num" id="L745"><a href="#L745">745</a></th><td class="line-code"><pre>++					iph-&gt;check = ip_fast_csum((uint8_t*)iph, iph-&gt;ihl);
</pre></td></tr>


<tr><th class="line-num" id="L746"><a href="#L746">746</a></th><td class="line-code"><pre>++					(pskb)-&gt;csum = csum_partial((uint8_t*)iph + ihl, size, 0);
</pre></td></tr>


<tr><th class="line-num" id="L747"><a href="#L747">747</a></th><td class="line-code"><pre>++					uh-&gt;check = csum_tcpudp_magic(iph-&gt;saddr, iph-&gt;daddr, size, iph-&gt;protocol, (pskb)-&gt;csum);
</pre></td></tr>


<tr><th class="line-num" id="L748"><a href="#L748">748</a></th><td class="line-code"><pre>++					
</pre></td></tr>


<tr><th class="line-num" id="L749"><a href="#L749">749</a></th><td class="line-code"><pre>++					if (uh-&gt;check == 0)
</pre></td></tr>


<tr><th class="line-num" id="L750"><a href="#L750">750</a></th><td class="line-code"><pre>++					{
</pre></td></tr>


<tr><th class="line-num" id="L751"><a href="#L751">751</a></th><td class="line-code"><pre>++						uh-&gt;check = 0xFFFF;
</pre></td></tr>


<tr><th class="line-num" id="L752"><a href="#L752">752</a></th><td class="line-code"><pre>++					}
</pre></td></tr>


<tr><th class="line-num" id="L753"><a href="#L753">753</a></th><td class="line-code"><pre>++					return info-&gt;target;
</pre></td></tr>


<tr><th class="line-num" id="L754"><a href="#L754">754</a></th><td class="line-code"><pre>++				}
</pre></td></tr>


<tr><th class="line-num" id="L755"><a href="#L755">755</a></th><td class="line-code"><pre>++				else
</pre></td></tr>


<tr><th class="line-num" id="L756"><a href="#L756">756</a></th><td class="line-code"><pre>++				{
</pre></td></tr>


<tr><th class="line-num" id="L757"><a href="#L757">757</a></th><td class="line-code"><pre>++					goto HANDLE_IP_PKT;
</pre></td></tr>


<tr><th class="line-num" id="L758"><a href="#L758">758</a></th><td class="line-code"><pre>++				}
</pre></td></tr>


<tr><th class="line-num" id="L759"><a href="#L759">759</a></th><td class="line-code"><pre>++			}	
</pre></td></tr>


<tr><th class="line-num" id="L760"><a href="#L760">760</a></th><td class="line-code"><pre>++			else
</pre></td></tr>


<tr><th class="line-num" id="L761"><a href="#L761">761</a></th><td class="line-code"><pre>++			{
</pre></td></tr>


<tr><th class="line-num" id="L762"><a href="#L762">762</a></th><td class="line-code"><pre>++				HANDLE_IP_PKT:
</pre></td></tr>


<tr><th class="line-num" id="L763"><a href="#L763">763</a></th><td class="line-code"><pre>++				spin_lock_irqsave(&amp;arpnat_lock, flags);
</pre></td></tr>


<tr><th class="line-num" id="L764"><a href="#L764">764</a></th><td class="line-code"><pre>++				entry = find_ip_nat(&amp;arpnat_table, iph-&gt;daddr);
</pre></td></tr>


<tr><th class="line-num" id="L765"><a href="#L765">765</a></th><td class="line-code"><pre>++				if (entry)
</pre></td></tr>


<tr><th class="line-num" id="L766"><a href="#L766">766</a></th><td class="line-code"><pre>++				{
</pre></td></tr>


<tr><th class="line-num" id="L767"><a href="#L767">767</a></th><td class="line-code"><pre>++					if (inet_confirm_addr( __in_dev_get_rcu(in_br_port-&gt;br-&gt;dev),  0, entry-&gt;data.ip, RT_SCOPE_HOST))
</pre></td></tr>


<tr><th class="line-num" id="L768"><a href="#L768">768</a></th><td class="line-code"><pre>++					{
</pre></td></tr>


<tr><th class="line-num" id="L769"><a href="#L769">769</a></th><td class="line-code"><pre>++						//to me
</pre></td></tr>


<tr><th class="line-num" id="L770"><a href="#L770">770</a></th><td class="line-code"><pre>++						if (debug)
</pre></td></tr>


<tr><th class="line-num" id="L771"><a href="#L771">771</a></th><td class="line-code"><pre>++						{
</pre></td></tr>


<tr><th class="line-num" id="L772"><a href="#L772">772</a></th><td class="line-code"><pre>++							printk(&quot;IP PKT TO ME: &quot;STRMAC&quot;[&quot;STRIP&quot;] -&gt; &quot;STRMAC&quot;[type: %d]\n&quot;, MAC2STR(eth_dmac), IP2STR(iph-&gt;daddr), MAC2STR(in_br_port-&gt;br-&gt;dev-&gt;dev_addr), (pskb)-&gt;pkt_type);
</pre></td></tr>


<tr><th class="line-num" id="L773"><a href="#L773">773</a></th><td class="line-code"><pre>++						}
</pre></td></tr>


<tr><th class="line-num" id="L774"><a href="#L774">774</a></th><td class="line-code"><pre>++						memcpy(eth_dmac, in_br_port-&gt;br-&gt;dev-&gt;dev_addr, ETH_ALEN);
</pre></td></tr>


<tr><th class="line-num" id="L775"><a href="#L775">775</a></th><td class="line-code"><pre>++					}
</pre></td></tr>


<tr><th class="line-num" id="L776"><a href="#L776">776</a></th><td class="line-code"><pre>++					else
</pre></td></tr>


<tr><th class="line-num" id="L777"><a href="#L777">777</a></th><td class="line-code"><pre>++					{
</pre></td></tr>


<tr><th class="line-num" id="L778"><a href="#L778">778</a></th><td class="line-code"><pre>++						if (debug)
</pre></td></tr>


<tr><th class="line-num" id="L779"><a href="#L779">779</a></th><td class="line-code"><pre>++						{
</pre></td></tr>


<tr><th class="line-num" id="L780"><a href="#L780">780</a></th><td class="line-code"><pre>++							printk(&quot;IP PKT TO OTHER: &quot;STRMAC&quot;[&quot;STRIP&quot;] -&gt; &quot;STRMAC&quot;[type: %d]\n&quot;, MAC2STR(eth_dmac), IP2STR(iph-&gt;daddr), MAC2STR(entry-&gt;data.mac), (pskb)-&gt;pkt_type);
</pre></td></tr>


<tr><th class="line-num" id="L781"><a href="#L781">781</a></th><td class="line-code"><pre>++						}
</pre></td></tr>


<tr><th class="line-num" id="L782"><a href="#L782">782</a></th><td class="line-code"><pre>++						memcpy(eth_dmac, entry-&gt;data.mac, ETH_ALEN);
</pre></td></tr>


<tr><th class="line-num" id="L783"><a href="#L783">783</a></th><td class="line-code"><pre>++						(pskb)-&gt;pkt_type = PACKET_OTHERHOST;
</pre></td></tr>


<tr><th class="line-num" id="L784"><a href="#L784">784</a></th><td class="line-code"><pre>++					}
</pre></td></tr>


<tr><th class="line-num" id="L785"><a href="#L785">785</a></th><td class="line-code"><pre>++					spin_unlock_irqrestore(&amp;arpnat_lock, flags);
</pre></td></tr>


<tr><th class="line-num" id="L786"><a href="#L786">786</a></th><td class="line-code"><pre>++					return info-&gt;target;
</pre></td></tr>


<tr><th class="line-num" id="L787"><a href="#L787">787</a></th><td class="line-code"><pre>++				}
</pre></td></tr>


<tr><th class="line-num" id="L788"><a href="#L788">788</a></th><td class="line-code"><pre>++				spin_unlock_irqrestore(&amp;arpnat_lock, flags);
</pre></td></tr>


<tr><th class="line-num" id="L789"><a href="#L789">789</a></th><td class="line-code"><pre>++			}
</pre></td></tr>


<tr><th class="line-num" id="L790"><a href="#L790">790</a></th><td class="line-code"><pre>++		}
</pre></td></tr>


<tr><th class="line-num" id="L791"><a href="#L791">791</a></th><td class="line-code"><pre>++		
</pre></td></tr>


<tr><th class="line-num" id="L792"><a href="#L792">792</a></th><td class="line-code"><pre>++		if (! (eth_dmac[0] &amp; 1))
</pre></td></tr>


<tr><th class="line-num" id="L793"><a href="#L793">793</a></th><td class="line-code"><pre>++		{
</pre></td></tr>


<tr><th class="line-num" id="L794"><a href="#L794">794</a></th><td class="line-code"><pre>++			if (memcmp(in_br_port-&gt;br-&gt;dev-&gt;dev_addr, eth_dmac, ETH_ALEN) &amp;&amp; memcmp(in-&gt;dev_addr, eth_dmac, ETH_ALEN))
</pre></td></tr>


<tr><th class="line-num" id="L795"><a href="#L795">795</a></th><td class="line-code"><pre>++			{
</pre></td></tr>


<tr><th class="line-num" id="L796"><a href="#L796">796</a></th><td class="line-code"><pre>++				return EBT_DROP;
</pre></td></tr>


<tr><th class="line-num" id="L797"><a href="#L797">797</a></th><td class="line-code"><pre>++			}
</pre></td></tr>


<tr><th class="line-num" id="L798"><a href="#L798">798</a></th><td class="line-code"><pre>++			spin_lock_irqsave(&amp;arpnat_lock, flags);
</pre></td></tr>


<tr><th class="line-num" id="L799"><a href="#L799">799</a></th><td class="line-code"><pre>++			entry = find_mac_nat(&amp;arpnat_table, eth_dmac);
</pre></td></tr>


<tr><th class="line-num" id="L800"><a href="#L800">800</a></th><td class="line-code"><pre>++			if (entry)
</pre></td></tr>


<tr><th class="line-num" id="L801"><a href="#L801">801</a></th><td class="line-code"><pre>++			{
</pre></td></tr>


<tr><th class="line-num" id="L802"><a href="#L802">802</a></th><td class="line-code"><pre>++				memcpy(eth_dmac, entry-&gt;data.mac, ETH_ALEN);
</pre></td></tr>


<tr><th class="line-num" id="L803"><a href="#L803">803</a></th><td class="line-code"><pre>++			}
</pre></td></tr>


<tr><th class="line-num" id="L804"><a href="#L804">804</a></th><td class="line-code"><pre>++			else
</pre></td></tr>


<tr><th class="line-num" id="L805"><a href="#L805">805</a></th><td class="line-code"><pre>++			{
</pre></td></tr>


<tr><th class="line-num" id="L806"><a href="#L806">806</a></th><td class="line-code"><pre>++				memcpy(eth_dmac, in_br_port-&gt;br-&gt;dev-&gt;dev_addr, ETH_ALEN);
</pre></td></tr>


<tr><th class="line-num" id="L807"><a href="#L807">807</a></th><td class="line-code"><pre>++			}
</pre></td></tr>


<tr><th class="line-num" id="L808"><a href="#L808">808</a></th><td class="line-code"><pre>++			spin_unlock_irqrestore(&amp;arpnat_lock, flags);
</pre></td></tr>


<tr><th class="line-num" id="L809"><a href="#L809">809</a></th><td class="line-code"><pre>++		}
</pre></td></tr>


<tr><th class="line-num" id="L810"><a href="#L810">810</a></th><td class="line-code"><pre>++	}
</pre></td></tr>


<tr><th class="line-num" id="L811"><a href="#L811">811</a></th><td class="line-code"><pre>++	else if (out)
</pre></td></tr>


<tr><th class="line-num" id="L812"><a href="#L812">812</a></th><td class="line-code"><pre>++	{
</pre></td></tr>


<tr><th class="line-num" id="L813"><a href="#L813">813</a></th><td class="line-code"><pre>++		struct net_bridge_port *out_br_port;
</pre></td></tr>


<tr><th class="line-num" id="L814"><a href="#L814">814</a></th><td class="line-code"><pre>++		out_br_port = br_port_get_rcu(out);
</pre></td></tr>


<tr><th class="line-num" id="L815"><a href="#L815">815</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L816"><a href="#L816">816</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L817"><a href="#L817">817</a></th><td class="line-code"><pre>++		/* handle outbound packets */
</pre></td></tr>


<tr><th class="line-num" id="L818"><a href="#L818">818</a></th><td class="line-code"><pre>++		if (ah)
</pre></td></tr>


<tr><th class="line-num" id="L819"><a href="#L819">819</a></th><td class="line-code"><pre>++		{
</pre></td></tr>


<tr><th class="line-num" id="L820"><a href="#L820">820</a></th><td class="line-code"><pre>++			switch (ah-&gt;ar_op)
</pre></td></tr>


<tr><th class="line-num" id="L821"><a href="#L821">821</a></th><td class="line-code"><pre>++			{
</pre></td></tr>


<tr><th class="line-num" id="L822"><a href="#L822">822</a></th><td class="line-code"><pre>++				case __constant_htons(ARPOP_REQUEST):
</pre></td></tr>


<tr><th class="line-num" id="L823"><a href="#L823">823</a></th><td class="line-code"><pre>++				case __constant_htons(ARPOP_REPLY):
</pre></td></tr>


<tr><th class="line-num" id="L824"><a href="#L824">824</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L825"><a href="#L825">825</a></th><td class="line-code"><pre>++				
</pre></td></tr>


<tr><th class="line-num" id="L826"><a href="#L826">826</a></th><td class="line-code"><pre>++				/* do BR ip lookup */
</pre></td></tr>


<tr><th class="line-num" id="L827"><a href="#L827">827</a></th><td class="line-code"><pre>++				if(inet_confirm_addr( __in_dev_get_rcu(out_br_port-&gt;br-&gt;dev), 0, *arp_dip, RT_SCOPE_HOST))
</pre></td></tr>


<tr><th class="line-num" id="L828"><a href="#L828">828</a></th><td class="line-code"><pre>++				{
</pre></td></tr>


<tr><th class="line-num" id="L829"><a href="#L829">829</a></th><td class="line-code"><pre>++					return info-&gt;target;
</pre></td></tr>


<tr><th class="line-num" id="L830"><a href="#L830">830</a></th><td class="line-code"><pre>++				}
</pre></td></tr>


<tr><th class="line-num" id="L831"><a href="#L831">831</a></th><td class="line-code"><pre>++				if(!inet_confirm_addr( __in_dev_get_rcu(out_br_port-&gt;br-&gt;dev), 0, *arp_sip, RT_SCOPE_HOST))
</pre></td></tr>


<tr><th class="line-num" id="L832"><a href="#L832">832</a></th><td class="line-code"><pre>++				{
</pre></td></tr>


<tr><th class="line-num" id="L833"><a href="#L833">833</a></th><td class="line-code"><pre>++					spin_lock_irqsave(&amp;arpnat_lock, flags);
</pre></td></tr>


<tr><th class="line-num" id="L834"><a href="#L834">834</a></th><td class="line-code"><pre>++					update_arp_nat(&amp;arpnat_table, arp_smac, *arp_sip);
</pre></td></tr>


<tr><th class="line-num" id="L835"><a href="#L835">835</a></th><td class="line-code"><pre>++					spin_unlock_irqrestore(&amp;arpnat_lock, flags);
</pre></td></tr>


<tr><th class="line-num" id="L836"><a href="#L836">836</a></th><td class="line-code"><pre>++				}
</pre></td></tr>


<tr><th class="line-num" id="L837"><a href="#L837">837</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L838"><a href="#L838">838</a></th><td class="line-code"><pre>++				//pskb = skb_unshare(pskb, GFP_ATOMIC);
</pre></td></tr>


<tr><th class="line-num" id="L839"><a href="#L839">839</a></th><td class="line-code"><pre>++				eth_smac = eth_hdr(pskb)-&gt;h_source;
</pre></td></tr>


<tr><th class="line-num" id="L840"><a href="#L840">840</a></th><td class="line-code"><pre>++				arp_smac = skb_network_header(pskb) + sizeof(struct arphdr);
</pre></td></tr>


<tr><th class="line-num" id="L841"><a href="#L841">841</a></th><td class="line-code"><pre>++				if (debug)
</pre></td></tr>


<tr><th class="line-num" id="L842"><a href="#L842">842</a></th><td class="line-code"><pre>++				{
</pre></td></tr>


<tr><th class="line-num" id="L843"><a href="#L843">843</a></th><td class="line-code"><pre>++					printk(&quot;OUT ARPNAT: &quot;STRMAC&quot; -&gt; &quot;STRMAC&quot;\n&quot;, MAC2STR(eth_smac), MAC2STR(out-&gt;dev_addr));
</pre></td></tr>


<tr><th class="line-num" id="L844"><a href="#L844">844</a></th><td class="line-code"><pre>++					printk(&quot;           arp_smac=&quot;STRMAC&quot;, arp_dmac=&quot;STRMAC&quot;\n&quot;, MAC2STR(arp_smac), MAC2STR(arp_dmac));
</pre></td></tr>


<tr><th class="line-num" id="L845"><a href="#L845">845</a></th><td class="line-code"><pre>++					printk(&quot;           arp_sip =&quot;STRIP&quot;, arp_dip =&quot;STRIP&quot;\n&quot;, IP2STR(*arp_sip), IP2STR(*arp_dip));
</pre></td></tr>


<tr><th class="line-num" id="L846"><a href="#L846">846</a></th><td class="line-code"><pre>++					if(ah-&gt;ar_op == __constant_htons(ARPOP_REPLY))
</pre></td></tr>


<tr><th class="line-num" id="L847"><a href="#L847">847</a></th><td class="line-code"><pre>++					{
</pre></td></tr>


<tr><th class="line-num" id="L848"><a href="#L848">848</a></th><td class="line-code"><pre>++						printk(&quot;           arp_op=reply\n&quot;);
</pre></td></tr>


<tr><th class="line-num" id="L849"><a href="#L849">849</a></th><td class="line-code"><pre>++					}
</pre></td></tr>


<tr><th class="line-num" id="L850"><a href="#L850">850</a></th><td class="line-code"><pre>++					else if(ah-&gt;ar_op == __constant_htons(ARPOP_REQUEST))
</pre></td></tr>


<tr><th class="line-num" id="L851"><a href="#L851">851</a></th><td class="line-code"><pre>++					{
</pre></td></tr>


<tr><th class="line-num" id="L852"><a href="#L852">852</a></th><td class="line-code"><pre>++						printk(&quot;           arp_op=request\n&quot;);
</pre></td></tr>


<tr><th class="line-num" id="L853"><a href="#L853">853</a></th><td class="line-code"><pre>++					}
</pre></td></tr>


<tr><th class="line-num" id="L854"><a href="#L854">854</a></th><td class="line-code"><pre>++					else
</pre></td></tr>


<tr><th class="line-num" id="L855"><a href="#L855">855</a></th><td class="line-code"><pre>++					{
</pre></td></tr>


<tr><th class="line-num" id="L856"><a href="#L856">856</a></th><td class="line-code"><pre>++						printk(&quot;           arp_op=%d\n&quot;, ntohs(ah-&gt;ar_op));
</pre></td></tr>


<tr><th class="line-num" id="L857"><a href="#L857">857</a></th><td class="line-code"><pre>++					}
</pre></td></tr>


<tr><th class="line-num" id="L858"><a href="#L858">858</a></th><td class="line-code"><pre>++				}
</pre></td></tr>


<tr><th class="line-num" id="L859"><a href="#L859">859</a></th><td class="line-code"><pre>++				memcpy(arp_smac, out-&gt;dev_addr, ETH_ALEN);
</pre></td></tr>


<tr><th class="line-num" id="L860"><a href="#L860">860</a></th><td class="line-code"><pre>++				memcpy(eth_smac, out-&gt;dev_addr, ETH_ALEN);
</pre></td></tr>


<tr><th class="line-num" id="L861"><a href="#L861">861</a></th><td class="line-code"><pre>++				return info-&gt;target;
</pre></td></tr>


<tr><th class="line-num" id="L862"><a href="#L862">862</a></th><td class="line-code"><pre>++				break;
</pre></td></tr>


<tr><th class="line-num" id="L863"><a href="#L863">863</a></th><td class="line-code"><pre>++			}
</pre></td></tr>


<tr><th class="line-num" id="L864"><a href="#L864">864</a></th><td class="line-code"><pre>++		}
</pre></td></tr>


<tr><th class="line-num" id="L865"><a href="#L865">865</a></th><td class="line-code"><pre>++		else if (bootpnat &amp;&amp; eth_hdr(pskb)-&gt;h_proto == __constant_htons(ETH_P_IP) &amp;&amp; memcmp(out_br_port-&gt;br-&gt;dev-&gt;dev_addr, eth_smac, ETH_ALEN))
</pre></td></tr>


<tr><th class="line-num" id="L866"><a href="#L866">866</a></th><td class="line-code"><pre>++		{
</pre></td></tr>


<tr><th class="line-num" id="L867"><a href="#L867">867</a></th><td class="line-code"><pre>++			struct iphdr *iph = ip_hdr(pskb);
</pre></td></tr>


<tr><th class="line-num" id="L868"><a href="#L868">868</a></th><td class="line-code"><pre>++			struct udphdr *uh = NULL;
</pre></td></tr>


<tr><th class="line-num" id="L869"><a href="#L869">869</a></th><td class="line-code"><pre>++			if ( (unsigned char)iph-&gt;protocol == (unsigned char)IPPROTO_UDP &amp;&amp; !(iph-&gt;frag_off &amp; htons(IP_OFFSET)))
</pre></td></tr>


<tr><th class="line-num" id="L870"><a href="#L870">870</a></th><td class="line-code"><pre>++			{
</pre></td></tr>


<tr><th class="line-num" id="L871"><a href="#L871">871</a></th><td class="line-code"><pre>++				uh = (struct udphdr*)((u_int32_t *)iph + iph-&gt;ihl);
</pre></td></tr>


<tr><th class="line-num" id="L872"><a href="#L872">872</a></th><td class="line-code"><pre>++				if (uh-&gt;dest == htons(67) || uh-&gt;dest == htons(68) )
</pre></td></tr>


<tr><th class="line-num" id="L873"><a href="#L873">873</a></th><td class="line-code"><pre>++				{
</pre></td></tr>


<tr><th class="line-num" id="L874"><a href="#L874">874</a></th><td class="line-code"><pre>++					//do something illegal for BOOTP
</pre></td></tr>


<tr><th class="line-num" id="L875"><a href="#L875">875</a></th><td class="line-code"><pre>++					uint32_t giaddr = inet_select_addr(out_br_port-&gt;br-&gt;dev, iph-&gt;daddr, RT_SCOPE_LINK);
</pre></td></tr>


<tr><th class="line-num" id="L876"><a href="#L876">876</a></th><td class="line-code"><pre>++					uint32_t* giaddrp = (uint32_t*)(((uint8_t*)uh) + sizeof(*uh) + GIADDR_OFFSET);
</pre></td></tr>


<tr><th class="line-num" id="L877"><a href="#L877">877</a></th><td class="line-code"><pre>++					uint32_t ihl = iph-&gt;ihl &lt;&lt; 2;
</pre></td></tr>


<tr><th class="line-num" id="L878"><a href="#L878">878</a></th><td class="line-code"><pre>++					uint32_t size = (pskb)-&gt;len - ihl;
</pre></td></tr>


<tr><th class="line-num" id="L879"><a href="#L879">879</a></th><td class="line-code"><pre>++					if (debug)
</pre></td></tr>


<tr><th class="line-num" id="L880"><a href="#L880">880</a></th><td class="line-code"><pre>++					{
</pre></td></tr>


<tr><th class="line-num" id="L881"><a href="#L881">881</a></th><td class="line-code"><pre>++						printk(&quot;OUT BOOTPRELAY: &quot;STRIP&quot; -&gt; &quot;STRIP&quot;\n&quot;, IP2STR(*giaddrp), IP2STR(giaddr));
</pre></td></tr>


<tr><th class="line-num" id="L882"><a href="#L882">882</a></th><td class="line-code"><pre>++					}
</pre></td></tr>


<tr><th class="line-num" id="L883"><a href="#L883">883</a></th><td class="line-code"><pre>++					*giaddrp = giaddr;
</pre></td></tr>


<tr><th class="line-num" id="L884"><a href="#L884">884</a></th><td class="line-code"><pre>++					uh-&gt;check = 0;
</pre></td></tr>


<tr><th class="line-num" id="L885"><a href="#L885">885</a></th><td class="line-code"><pre>++					(pskb)-&gt;csum = csum_partial((uint8_t*)iph + ihl, size, 0);
</pre></td></tr>


<tr><th class="line-num" id="L886"><a href="#L886">886</a></th><td class="line-code"><pre>++					uh-&gt;check = csum_tcpudp_magic(iph-&gt;saddr, iph-&gt;daddr, size, iph-&gt;protocol, (pskb)-&gt;csum);
</pre></td></tr>


<tr><th class="line-num" id="L887"><a href="#L887">887</a></th><td class="line-code"><pre>++					
</pre></td></tr>


<tr><th class="line-num" id="L888"><a href="#L888">888</a></th><td class="line-code"><pre>++					if (uh-&gt;check == 0)
</pre></td></tr>


<tr><th class="line-num" id="L889"><a href="#L889">889</a></th><td class="line-code"><pre>++					{
</pre></td></tr>


<tr><th class="line-num" id="L890"><a href="#L890">890</a></th><td class="line-code"><pre>++						uh-&gt;check = 0xFFFF;
</pre></td></tr>


<tr><th class="line-num" id="L891"><a href="#L891">891</a></th><td class="line-code"><pre>++					}
</pre></td></tr>


<tr><th class="line-num" id="L892"><a href="#L892">892</a></th><td class="line-code"><pre>++				}
</pre></td></tr>


<tr><th class="line-num" id="L893"><a href="#L893">893</a></th><td class="line-code"><pre>++			}
</pre></td></tr>


<tr><th class="line-num" id="L894"><a href="#L894">894</a></th><td class="line-code"><pre>++		}
</pre></td></tr>


<tr><th class="line-num" id="L895"><a href="#L895">895</a></th><td class="line-code"><pre>++		memcpy(eth_smac, out-&gt;dev_addr, ETH_ALEN);
</pre></td></tr>


<tr><th class="line-num" id="L896"><a href="#L896">896</a></th><td class="line-code"><pre>++	}
</pre></td></tr>


<tr><th class="line-num" id="L897"><a href="#L897">897</a></th><td class="line-code"><pre>++	return info-&gt;target;
</pre></td></tr>


<tr><th class="line-num" id="L898"><a href="#L898">898</a></th><td class="line-code"><pre>++}
</pre></td></tr>


<tr><th class="line-num" id="L899"><a href="#L899">899</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L900"><a href="#L900">900</a></th><td class="line-code"><pre>++static int ebt_target_nat_arpcheck(const struct xt_tgchk_param *par)
</pre></td></tr>


<tr><th class="line-num" id="L901"><a href="#L901">901</a></th><td class="line-code"><pre>++{
</pre></td></tr>


<tr><th class="line-num" id="L902"><a href="#L902">902</a></th><td class="line-code"><pre>++	return 0;
</pre></td></tr>


<tr><th class="line-num" id="L903"><a href="#L903">903</a></th><td class="line-code"><pre>++}
</pre></td></tr>


<tr><th class="line-num" id="L904"><a href="#L904">904</a></th><td class="line-code"><pre>++static struct xt_target arpnat =
</pre></td></tr>


<tr><th class="line-num" id="L905"><a href="#L905">905</a></th><td class="line-code"><pre>++{
</pre></td></tr>


<tr><th class="line-num" id="L906"><a href="#L906">906</a></th><td class="line-code"><pre>++	.name		= EBT_ARPNAT_TARGET,
</pre></td></tr>


<tr><th class="line-num" id="L907"><a href="#L907">907</a></th><td class="line-code"><pre>++	.revision	= 0,
</pre></td></tr>


<tr><th class="line-num" id="L908"><a href="#L908">908</a></th><td class="line-code"><pre>++	.family		= NFPROTO_BRIDGE,
</pre></td></tr>


<tr><th class="line-num" id="L909"><a href="#L909">909</a></th><td class="line-code"><pre>++	.table		= &quot;nat&quot;,
</pre></td></tr>


<tr><th class="line-num" id="L910"><a href="#L910">910</a></th><td class="line-code"><pre>++	.hooks		= (1 &lt;&lt; NF_BR_NUMHOOKS) | (1 &lt;&lt; NF_BR_POST_ROUTING) |  (1 &lt;&lt; NF_BR_PRE_ROUTING) ,
</pre></td></tr>


<tr><th class="line-num" id="L911"><a href="#L911">911</a></th><td class="line-code"><pre>++	.target		= ebt_target_arpnat, 
</pre></td></tr>


<tr><th class="line-num" id="L912"><a href="#L912">912</a></th><td class="line-code"><pre>++	.checkentry	= ebt_target_nat_arpcheck,
</pre></td></tr>


<tr><th class="line-num" id="L913"><a href="#L913">913</a></th><td class="line-code"><pre>++	.targetsize	= XT_ALIGN(sizeof(struct ebt_nat_info)),
</pre></td></tr>


<tr><th class="line-num" id="L914"><a href="#L914">914</a></th><td class="line-code"><pre>++	.me		= THIS_MODULE
</pre></td></tr>


<tr><th class="line-num" id="L915"><a href="#L915">915</a></th><td class="line-code"><pre>++};
</pre></td></tr>


<tr><th class="line-num" id="L916"><a href="#L916">916</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L917"><a href="#L917">917</a></th><td class="line-code"><pre>++static int __init init(void)
</pre></td></tr>


<tr><th class="line-num" id="L918"><a href="#L918">918</a></th><td class="line-code"><pre>++{
</pre></td></tr>


<tr><th class="line-num" id="L919"><a href="#L919">919</a></th><td class="line-code"><pre>++#ifdef CONFIG_PROC_FS
</pre></td></tr>


<tr><th class="line-num" id="L920"><a href="#L920">920</a></th><td class="line-code"><pre>++	struct proc_dir_entry *proc_arpnat_info  = create_proc_entry(&quot;arpnat_info&quot;, 0, NULL);
</pre></td></tr>


<tr><th class="line-num" id="L921"><a href="#L921">921</a></th><td class="line-code"><pre>++	struct proc_dir_entry *proc_arpnat_cache = create_proc_entry(&quot;arpnat_cache&quot;, 0, NULL);
</pre></td></tr>


<tr><th class="line-num" id="L922"><a href="#L922">922</a></th><td class="line-code"><pre>++	if(proc_arpnat_info)
</pre></td></tr>


<tr><th class="line-num" id="L923"><a href="#L923">923</a></th><td class="line-code"><pre>++	{
</pre></td></tr>


<tr><th class="line-num" id="L924"><a href="#L924">924</a></th><td class="line-code"><pre>++		proc_arpnat_info-&gt;proc_fops = &amp;arpnat_info_fops;
</pre></td></tr>


<tr><th class="line-num" id="L925"><a href="#L925">925</a></th><td class="line-code"><pre>++	}
</pre></td></tr>


<tr><th class="line-num" id="L926"><a href="#L926">926</a></th><td class="line-code"><pre>++	
</pre></td></tr>


<tr><th class="line-num" id="L927"><a href="#L927">927</a></th><td class="line-code"><pre>++	if(proc_arpnat_cache)
</pre></td></tr>


<tr><th class="line-num" id="L928"><a href="#L928">928</a></th><td class="line-code"><pre>++	{
</pre></td></tr>


<tr><th class="line-num" id="L929"><a href="#L929">929</a></th><td class="line-code"><pre>++		proc_arpnat_cache-&gt;proc_fops = &amp;arpnat_cache_fops;
</pre></td></tr>


<tr><th class="line-num" id="L930"><a href="#L930">930</a></th><td class="line-code"><pre>++	}
</pre></td></tr>


<tr><th class="line-num" id="L931"><a href="#L931">931</a></th><td class="line-code"><pre>++#endif
</pre></td></tr>


<tr><th class="line-num" id="L932"><a href="#L932">932</a></th><td class="line-code"><pre>++	return xt_register_target(&amp;arpnat);
</pre></td></tr>


<tr><th class="line-num" id="L933"><a href="#L933">933</a></th><td class="line-code"><pre>++}
</pre></td></tr>


<tr><th class="line-num" id="L934"><a href="#L934">934</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L935"><a href="#L935">935</a></th><td class="line-code"><pre>++static void __exit fini(void)
</pre></td></tr>


<tr><th class="line-num" id="L936"><a href="#L936">936</a></th><td class="line-code"><pre>++{
</pre></td></tr>


<tr><th class="line-num" id="L937"><a href="#L937">937</a></th><td class="line-code"><pre>++	xt_unregister_target(&amp;arpnat);
</pre></td></tr>


<tr><th class="line-num" id="L938"><a href="#L938">938</a></th><td class="line-code"><pre>++	free_arp_nat(&amp;arpnat_table);
</pre></td></tr>


<tr><th class="line-num" id="L939"><a href="#L939">939</a></th><td class="line-code"><pre>++#ifdef CONFIG_PROC_FS
</pre></td></tr>


<tr><th class="line-num" id="L940"><a href="#L940">940</a></th><td class="line-code"><pre>++	remove_proc_entry(&quot;arpnat_info&quot;, NULL);
</pre></td></tr>


<tr><th class="line-num" id="L941"><a href="#L941">941</a></th><td class="line-code"><pre>++	remove_proc_entry(&quot;arpnat_cache&quot;, NULL);
</pre></td></tr>


<tr><th class="line-num" id="L942"><a href="#L942">942</a></th><td class="line-code"><pre>++#endif
</pre></td></tr>


<tr><th class="line-num" id="L943"><a href="#L943">943</a></th><td class="line-code"><pre>++}
</pre></td></tr>


<tr><th class="line-num" id="L944"><a href="#L944">944</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L945"><a href="#L945">945</a></th><td class="line-code"><pre>++module_init(init);
</pre></td></tr>


<tr><th class="line-num" id="L946"><a href="#L946">946</a></th><td class="line-code"><pre>++module_exit(fini);
</pre></td></tr>


<tr><th class="line-num" id="L947"><a href="#L947">947</a></th><td class="line-code"><pre>++MODULE_LICENSE(&quot;GPL&quot;);
</pre></td></tr>


<tr><th class="line-num" id="L948"><a href="#L948">948</a></th><td class="line-code"><pre>++
</pre></td></tr>


<tr><th class="line-num" id="L949"><a href="#L949">949</a></th><td class="line-code"><pre>++
</pre></td></tr>


</tbody>
</table>
</div>




        
				<div style="clear:both;"></div>
    </div>
</div>

<div id="ajax-indicator" style="display:none;"><span>Loading...</span></div>
	
<div id="footer">
    Powered by <a href="http://www.redmine.org/">Redmine</a> &copy; 2006-2010 Jean-Philippe Lang
</div>
</div>

</body>
</html>
